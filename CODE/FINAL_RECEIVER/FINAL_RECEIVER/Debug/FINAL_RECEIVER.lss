
FINAL_RECEIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000942  000009d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000942  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800126  00800126  000009fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d0c  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1f  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097f  00000000  00000000  00003297  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e9  00000000  00000000  00003f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f48  00000000  00000000  00004625  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000556d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
			nRF24L01_listen(rf, 0, address);
		}
	}
	return 0;
}
nRF24L01 *setup_rf(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
  aa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
	// interrupt on falling edge of INT0 (PD2)
	EICRA |= _BV(ISC01);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
  e6:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 4a 02 	call	0x494	; 0x494 <nRF24L01_begin>
	return rf;
}
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <process_message>:

void process_message(char *message) {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	if (strcmp(message, "ON") == 0)
  fc:	6b e0       	ldi	r22, 0x0B	; 11
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	0e 94 96 04 	call	0x92c	; 0x92c <strcmp>
 104:	89 2b       	or	r24, r25
 106:	11 f4       	brne	.+4      	; 0x10c <process_message+0x16>
inline void prepare_led_pin(void) {
	DDRB |= _BV(PB0);
	PORTB &= ~_BV(PB0);
}
inline void set_led_high(void) {
	PORTB |= _BV(PB0);
 108:	28 9a       	sbi	0x05, 0	; 5
 10a:	08 c0       	rjmp	.+16     	; 0x11c <process_message+0x26>
}

void process_message(char *message) {
	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
 10c:	6e e0       	ldi	r22, 0x0E	; 14
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	ce 01       	movw	r24, r28
 112:	0e 94 96 04 	call	0x92c	; 0x92c <strcmp>
 116:	89 2b       	or	r24, r25
 118:	09 f4       	brne	.+2      	; 0x11c <process_message+0x26>
}
inline void set_led_high(void) {
	PORTB |= _BV(PB0);
}
inline void set_led_low(void) {
	PORTB &= ~_BV(PB0);
 11a:	28 98       	cbi	0x05, 0	; 5
void process_message(char *message) {
	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
	set_led_low();
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <USART_init>:



/* INIT USART (RS-232) */
void USART_init( unsigned int ubrr ) {
	UBRR0H = (unsigned char)(ubrr>>8);
 122:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 126:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0); // Enable receiver, transmitter & RX interrupt
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 136:	08 95       	ret

00000138 <USART_tx_string>:
}

void USART_tx_string( char *data ) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	while ((*data != '\0')) {
 13c:	fc 01       	movw	r30, r24
 13e:	20 81       	ld	r18, Z
 140:	22 23       	and	r18, r18
 142:	69 f0       	breq	.+26     	; 0x15e <USART_tx_string+0x26>
 144:	dc 01       	movw	r26, r24
 146:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1 <<UDRE0)));
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
 14c:	c6 ec       	ldi	r28, 0xC6	; 198
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
		while (!(UCSR0A & (1 <<UDRE0)));
 150:	90 81       	ld	r25, Z
 152:	95 ff       	sbrs	r25, 5
 154:	fd cf       	rjmp	.-6      	; 0x150 <USART_tx_string+0x18>
		UDR0 = *data;
 156:	28 83       	st	Y, r18
	UCSR0B = (1 << TXEN0); // Enable receiver, transmitter & RX interrupt
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
 158:	2d 91       	ld	r18, X+
 15a:	21 11       	cpse	r18, r1
 15c:	f9 cf       	rjmp	.-14     	; 0x150 <USART_tx_string+0x18>
		while (!(UCSR0A & (1 <<UDRE0)));
		UDR0 = *data;
		data++;
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <main>:
void USART_tx_string(char *data); //Print String USART
volatile unsigned int adc_temp;
char outs[20]; //array


int main(void) {
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	c0 55       	subi	r28, 0x50	; 80
 16e:	d1 09       	sbc	r29, r1
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
	uint8_t address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	e6 e0       	ldi	r30, 0x06	; 6
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	de 01       	movw	r26, r28
 182:	11 96       	adiw	r26, 0x01	; 1
 184:	01 90       	ld	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	8a 95       	dec	r24
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x20>
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
	set_led_low();
}
inline void prepare_led_pin(void) {
	DDRB |= _BV(PB0);
 18c:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~_BV(PB0);
 18e:	28 98       	cbi	0x05, 0	; 5

int main(void) {
	uint8_t address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
	prepare_led_pin();
	char str[80];
		USART_init(MYUBRR); // Initialize the USART (RS232 interface)
 190:	87 e6       	ldi	r24, 0x67	; 103
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 91 00 	call	0x122	; 0x122 <USART_init>
		USART_tx_string("Connected!\r\n"); // shows theres a connection with USART
 198:	82 e1       	ldi	r24, 0x12	; 18
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 9c 00 	call	0x138	; 0x138 <USART_tx_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f e7       	ldi	r18, 0x7F	; 127
 1a2:	8a e1       	ldi	r24, 0x1A	; 26
 1a4:	96 e0       	ldi	r25, 0x06	; 6
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x42>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x4c>
 1b0:	00 00       	nop
		_delay_ms(125); // wait a bit
		
		
	sei();
 1b2:	78 94       	sei
	nRF24L01 *rf = setup_rf();
 1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 1b8:	7c 01       	movw	r14, r24
	nRF24L01_listen(rf, 0, address);
 1ba:	ae 01       	movw	r20, r28
 1bc:	4f 5f       	subi	r20, 0xFF	; 255
 1be:	5f 4f       	sbci	r21, 0xFF	; 255
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 b1 01 	call	0x362	; 0x362 <nRF24L01_listen>
	uint8_t addr[5];
	nRF24L01_read_register(rf, CONFIG, addr, 1);
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	ae 01       	movw	r20, r28
 1ce:	4a 5f       	subi	r20, 0xFA	; 250
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	c7 01       	movw	r24, r14
 1d6:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_read_register>
		int i = 0;
 1da:	00 e0       	ldi	r16, 0x00	; 0
 1dc:	10 e0       	ldi	r17, 0x00	; 0
	while (true) {
		if (rf_interrupt) {
 1de:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 1e2:	88 23       	and	r24, r24
 1e4:	e1 f3       	breq	.-8      	; 0x1de <main+0x7a>
			rf_interrupt = false;
 1e6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		
			while (nRF24L01_data_received(rf)) {
 1ea:	3b c0       	rjmp	.+118    	; 0x262 <main+0xfe>
				nRF24L01Message msg;
				nRF24L01Message msg2;
				if(i == 0){
 1ec:	01 15       	cp	r16, r1
 1ee:	11 05       	cpc	r17, r1
 1f0:	59 f4       	brne	.+22     	; 0x208 <main+0xa4>
				nRF24L01_read_received_data(rf, &msg);
 1f2:	be 01       	movw	r22, r28
 1f4:	62 5d       	subi	r22, 0xD2	; 210
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	c7 01       	movw	r24, r14
 1fa:	0e 94 45 03 	call	0x68a	; 0x68a <nRF24L01_read_received_data>
				process_message((char *)msg.data);
 1fe:	ce 01       	movw	r24, r28
 200:	c0 96       	adiw	r24, 0x30	; 48
 202:	0e 94 7b 00 	call	0xf6	; 0xf6 <process_message>
 206:	26 c0       	rjmp	.+76     	; 0x254 <main+0xf0>
				//USART_tx_string("LOOP1");
				//i++;
				}
				 if(i == 1){
 208:	01 30       	cpi	r16, 0x01	; 1
 20a:	11 05       	cpc	r17, r1
 20c:	69 f4       	brne	.+26     	; 0x228 <main+0xc4>
				nRF24L01_read_received_data(rf, &msg2);
 20e:	be 01       	movw	r22, r28
 210:	65 5f       	subi	r22, 0xF5	; 245
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	c7 01       	movw	r24, r14
 216:	0e 94 45 03 	call	0x68a	; 0x68a <nRF24L01_read_received_data>
				
				process_message((char *)msg2.data);
 21a:	ce 01       	movw	r24, r28
 21c:	0d 96       	adiw	r24, 0x0d	; 13
 21e:	0e 94 7b 00 	call	0xf6	; 0xf6 <process_message>
					USART_tx_string(" ");
					USART_tx_string(msg2.data);
					USART_tx_string(" \r\n");
				//	i = 0;
				}
				i++;
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	1f 4f       	sbci	r17, 0xFF	; 255
 226:	1d c0       	rjmp	.+58     	; 0x262 <main+0xfe>
				
				process_message((char *)msg2.data);
				//USART_tx_string("LOOP2");
			//	i++;
				}
				 if(i==2)
 228:	02 30       	cpi	r16, 0x02	; 2
 22a:	11 05       	cpc	r17, r1
 22c:	99 f4       	brne	.+38     	; 0x254 <main+0xf0>
				{
					USART_tx_string(msg.data);
 22e:	ce 01       	movw	r24, r28
 230:	c0 96       	adiw	r24, 0x30	; 48
 232:	0e 94 9c 00 	call	0x138	; 0x138 <USART_tx_string>
					USART_tx_string(" ");
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 9c 00 	call	0x138	; 0x138 <USART_tx_string>
					USART_tx_string(msg2.data);
 23e:	ce 01       	movw	r24, r28
 240:	0d 96       	adiw	r24, 0x0d	; 13
 242:	0e 94 9c 00 	call	0x138	; 0x138 <USART_tx_string>
					USART_tx_string(" \r\n");
 246:	81 e2       	ldi	r24, 0x21	; 33
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 9c 00 	call	0x138	; 0x138 <USART_tx_string>
				//	i = 0;
				}
				i++;
				if(i == 3)
				i = 0;
 24e:	00 e0       	ldi	r16, 0x00	; 0
 250:	10 e0       	ldi	r17, 0x00	; 0
 252:	07 c0       	rjmp	.+14     	; 0x262 <main+0xfe>
					USART_tx_string(" ");
					USART_tx_string(msg2.data);
					USART_tx_string(" \r\n");
				//	i = 0;
				}
				i++;
 254:	0f 5f       	subi	r16, 0xFF	; 255
 256:	1f 4f       	sbci	r17, 0xFF	; 255
				if(i == 3)
 258:	03 30       	cpi	r16, 0x03	; 3
 25a:	11 05       	cpc	r17, r1
 25c:	11 f4       	brne	.+4      	; 0x262 <main+0xfe>
				i = 0;
 25e:	00 e0       	ldi	r16, 0x00	; 0
 260:	10 e0       	ldi	r17, 0x00	; 0
		int i = 0;
	while (true) {
		if (rf_interrupt) {
			rf_interrupt = false;
		
			while (nRF24L01_data_received(rf)) {
 262:	c7 01       	movw	r24, r14
 264:	0e 94 18 02 	call	0x430	; 0x430 <nRF24L01_data_received>
 268:	81 11       	cpse	r24, r1
 26a:	c0 cf       	rjmp	.-128    	; 0x1ec <main+0x88>
				if(i == 3)
				i = 0;
				//USART_tx_string("EXTRA\r\n");
			//	USART_tx_string(" \r\n");
			}
			nRF24L01_listen(rf, 0, address);
 26c:	ae 01       	movw	r20, r28
 26e:	4f 5f       	subi	r20, 0xFF	; 255
 270:	5f 4f       	sbci	r21, 0xFF	; 255
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	c7 01       	movw	r24, r14
 278:	0e 94 b1 01 	call	0x362	; 0x362 <nRF24L01_listen>
 27c:	b0 cf       	rjmp	.-160    	; 0x1de <main+0x7a>

0000027e <__vector_1>:
		UDR0 = *data;
		data++;
	}
}
// nRF24L01 interrupt
ISR(INT0_vect) {
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
	rf_interrupt = true;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <copy_address>:
	uint8_t config;
	nRF24L01_read_register(rf, CONFIG, &config, 1);
	config |= _BV(PRIM_RX);
	nRF24L01_write_register(rf, CONFIG, &config, 1);
	return success;
}
 29c:	fc 01       	movw	r30, r24
 29e:	a6 2f       	mov	r26, r22
 2a0:	b7 2f       	mov	r27, r23
 2a2:	9c 01       	movw	r18, r24
 2a4:	2b 5f       	subi	r18, 0xFB	; 251
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	91 91       	ld	r25, Z+
 2aa:	9d 93       	st	X+, r25
 2ac:	e2 17       	cp	r30, r18
 2ae:	f3 07       	cpc	r31, r19
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <copy_address+0xc>
 2b2:	08 95       	ret

000002b4 <nRF24L01_init>:
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 75 03 	call	0x6ea	; 0x6ea <malloc>
 2bc:	20 e1       	ldi	r18, 0x10	; 16
 2be:	fc 01       	movw	r30, r24
 2c0:	11 92       	st	Z+, r1
 2c2:	2a 95       	dec	r18
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <nRF24L01_init+0xc>
 2c6:	08 95       	ret

000002c8 <nRF24L01_send_command>:
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
 2ce:	da 01       	movw	r26, r20
 2d0:	e8 81       	ld	r30, Y
 2d2:	f9 81       	ldd	r31, Y+1	; 0x01
 2d4:	50 81       	ld	r21, Z
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0a 80       	ldd	r0, Y+2	; 0x02
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <nRF24L01_send_command+0x1a>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <nRF24L01_send_command+0x16>
 2e6:	80 95       	com	r24
 2e8:	85 23       	and	r24, r21
 2ea:	80 83       	st	Z, r24
 2ec:	6e bd       	out	0x2e, r22	; 46
 2ee:	0d b4       	in	r0, 0x2d	; 45
 2f0:	07 fe       	sbrs	r0, 7
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <nRF24L01_send_command+0x26>
 2f4:	8e b5       	in	r24, 0x2e	; 46
 2f6:	8f 87       	std	Y+15, r24	; 0x0f
 2f8:	21 15       	cp	r18, r1
 2fa:	31 05       	cpc	r19, r1
 2fc:	79 f0       	breq	.+30     	; 0x31c <nRF24L01_send_command+0x54>
 2fe:	fd 01       	movw	r30, r26
 300:	2a 0f       	add	r18, r26
 302:	3b 1f       	adc	r19, r27
 304:	df 01       	movw	r26, r30
 306:	90 81       	ld	r25, Z
 308:	9e bd       	out	0x2e, r25	; 46
 30a:	0d b4       	in	r0, 0x2d	; 45
 30c:	07 fe       	sbrs	r0, 7
 30e:	fd cf       	rjmp	.-6      	; 0x30a <nRF24L01_send_command+0x42>
 310:	9e b5       	in	r25, 0x2e	; 46
 312:	9c 93       	st	X, r25
 314:	31 96       	adiw	r30, 0x01	; 1
 316:	e2 17       	cp	r30, r18
 318:	f3 07       	cpc	r31, r19
 31a:	a1 f7       	brne	.-24     	; 0x304 <nRF24L01_send_command+0x3c>
 31c:	e8 81       	ld	r30, Y
 31e:	f9 81       	ldd	r31, Y+1	; 0x01
 320:	20 81       	ld	r18, Z
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0a 80       	ldd	r0, Y+2	; 0x02
 328:	02 c0       	rjmp	.+4      	; 0x32e <nRF24L01_send_command+0x66>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <nRF24L01_send_command+0x62>
 332:	82 2b       	or	r24, r18
 334:	80 83       	st	Z, r24
 336:	8f 85       	ldd	r24, Y+15	; 0x0f
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <nRF24L01_write_register>:
 33e:	60 62       	ori	r22, 0x20	; 32
 340:	0e 94 64 01 	call	0x2c8	; 0x2c8 <nRF24L01_send_command>
 344:	08 95       	ret

00000346 <nRF24L01_read_register>:
 346:	0e 94 64 01 	call	0x2c8	; 0x2c8 <nRF24L01_send_command>
 34a:	08 95       	ret

0000034c <nRF24L01_no_op>:
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	6f ef       	ldi	r22, 0xFF	; 255
 356:	0e 94 64 01 	call	0x2c8	; 0x2c8 <nRF24L01_send_command>
 35a:	08 95       	ret

0000035c <nRF24L01_update_status>:
 35c:	0e 94 a6 01 	call	0x34c	; 0x34c <nRF24L01_no_op>
 360:	08 95       	ret

00000362 <nRF24L01_listen>:
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <nRF24L01_listen+0x10>
 372:	00 d0       	rcall	.+0      	; 0x374 <nRF24L01_listen+0x12>
 374:	00 d0       	rcall	.+0      	; 0x376 <nRF24L01_listen+0x14>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	7c 01       	movw	r14, r24
 37c:	d6 2e       	mov	r13, r22
 37e:	ca 01       	movw	r24, r20
 380:	be 01       	movw	r22, r28
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	0e 94 4e 01 	call	0x29c	; 0x29c <copy_address>
 38a:	6a e0       	ldi	r22, 0x0A	; 10
 38c:	6d 0d       	add	r22, r13
 38e:	25 e0       	ldi	r18, 0x05	; 5
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	ae 01       	movw	r20, r28
 394:	4f 5f       	subi	r20, 0xFF	; 255
 396:	5f 4f       	sbci	r21, 0xFF	; 255
 398:	c7 01       	movw	r24, r14
 39a:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	ae 01       	movw	r20, r28
 3a4:	4a 5f       	subi	r20, 0xFA	; 250
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	c7 01       	movw	r24, r14
 3ac:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_read_register>
 3b0:	01 e0       	ldi	r16, 0x01	; 1
 3b2:	10 e0       	ldi	r17, 0x00	; 0
 3b4:	c8 01       	movw	r24, r16
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <nRF24L01_listen+0x5a>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	da 94       	dec	r13
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <nRF24L01_listen+0x56>
 3c0:	9e 81       	ldd	r25, Y+6	; 0x06
 3c2:	89 2b       	or	r24, r25
 3c4:	8e 83       	std	Y+6, r24	; 0x06
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	ae 01       	movw	r20, r28
 3cc:	4a 5f       	subi	r20, 0xFA	; 250
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	c7 01       	movw	r24, r14
 3d4:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 3d8:	d7 01       	movw	r26, r14
 3da:	13 96       	adiw	r26, 0x03	; 3
 3dc:	ed 91       	ld	r30, X+
 3de:	fc 91       	ld	r31, X
 3e0:	14 97       	sbiw	r26, 0x04	; 4
 3e2:	80 81       	ld	r24, Z
 3e4:	15 96       	adiw	r26, 0x05	; 5
 3e6:	0c 90       	ld	r0, X
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <nRF24L01_listen+0x8c>
 3ea:	00 0f       	add	r16, r16
 3ec:	11 1f       	adc	r17, r17
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <nRF24L01_listen+0x88>
 3f2:	08 2b       	or	r16, r24
 3f4:	00 83       	st	Z, r16
 3f6:	26 96       	adiw	r28, 0x06	; 6
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	08 95       	ret

00000412 <nRF24L01_pipe_number_received>:
 412:	fc 01       	movw	r30, r24
 414:	27 85       	ldd	r18, Z+15	; 0x0f
 416:	2e 70       	andi	r18, 0x0E	; 14
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	35 95       	asr	r19
 41c:	27 95       	ror	r18
 41e:	26 30       	cpi	r18, 0x06	; 6
 420:	31 05       	cpc	r19, r1
 422:	1c f4       	brge	.+6      	; 0x42a <nRF24L01_pipe_number_received+0x18>
 424:	82 2f       	mov	r24, r18
 426:	93 2f       	mov	r25, r19
 428:	08 95       	ret
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	08 95       	ret

00000430 <nRF24L01_data_received>:
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
 436:	eb 81       	ldd	r30, Y+3	; 0x03
 438:	fc 81       	ldd	r31, Y+4	; 0x04
 43a:	20 81       	ld	r18, Z
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0d 80       	ldd	r0, Y+5	; 0x05
 442:	02 c0       	rjmp	.+4      	; 0x448 <nRF24L01_data_received+0x18>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <nRF24L01_data_received+0x14>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	80 83       	st	Z, r24
 452:	ce 01       	movw	r24, r28
 454:	0e 94 ae 01 	call	0x35c	; 0x35c <nRF24L01_update_status>
 458:	ce 01       	movw	r24, r28
 45a:	0e 94 09 02 	call	0x412	; 0x412 <nRF24L01_pipe_number_received>
 45e:	89 2f       	mov	r24, r25
 460:	80 95       	com	r24
 462:	88 1f       	adc	r24, r24
 464:	88 27       	eor	r24, r24
 466:	88 1f       	adc	r24, r24
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <nRF24L01_clear_interrupts>:
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	1f 92       	push	r1
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	20 e7       	ldi	r18, 0x70	; 112
 47a:	29 83       	std	Y+1, r18	; 0x01
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	ae 01       	movw	r20, r28
 482:	4f 5f       	subi	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255
 486:	67 e0       	ldi	r22, 0x07	; 7
 488:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 48c:	0f 90       	pop	r0
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <nRF24L01_begin>:
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	1f 92       	push	r1
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	8c 01       	movw	r16, r24
 4a6:	dc 01       	movw	r26, r24
 4a8:	ed 91       	ld	r30, X+
 4aa:	fc 91       	ld	r31, X
 4ac:	11 97       	sbiw	r26, 0x01	; 1
 4ae:	42 91       	ld	r20, -Z
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	9c 01       	movw	r18, r24
 4b6:	12 96       	adiw	r26, 0x02	; 2
 4b8:	0c 90       	ld	r0, X
 4ba:	12 97       	sbiw	r26, 0x02	; 2
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <nRF24L01_begin+0x2e>
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <nRF24L01_begin+0x2a>
 4c6:	24 2b       	or	r18, r20
 4c8:	20 83       	st	Z, r18
 4ca:	13 96       	adiw	r26, 0x03	; 3
 4cc:	ed 91       	ld	r30, X+
 4ce:	fc 91       	ld	r31, X
 4d0:	14 97       	sbiw	r26, 0x04	; 4
 4d2:	42 91       	ld	r20, -Z
 4d4:	9c 01       	movw	r18, r24
 4d6:	15 96       	adiw	r26, 0x05	; 5
 4d8:	0c 90       	ld	r0, X
 4da:	15 97       	sbiw	r26, 0x05	; 5
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <nRF24L01_begin+0x4e>
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <nRF24L01_begin+0x4a>
 4e6:	24 2b       	or	r18, r20
 4e8:	20 83       	st	Z, r18
 4ea:	ed 91       	ld	r30, X+
 4ec:	fc 91       	ld	r31, X
 4ee:	11 97       	sbiw	r26, 0x01	; 1
 4f0:	40 81       	ld	r20, Z
 4f2:	9c 01       	movw	r18, r24
 4f4:	12 96       	adiw	r26, 0x02	; 2
 4f6:	0c 90       	ld	r0, X
 4f8:	12 97       	sbiw	r26, 0x02	; 2
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <nRF24L01_begin+0x6c>
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <nRF24L01_begin+0x68>
 504:	24 2b       	or	r18, r20
 506:	20 83       	st	Z, r18
 508:	13 96       	adiw	r26, 0x03	; 3
 50a:	ed 91       	ld	r30, X+
 50c:	fc 91       	ld	r31, X
 50e:	14 97       	sbiw	r26, 0x04	; 4
 510:	30 81       	ld	r19, Z
 512:	ac 01       	movw	r20, r24
 514:	15 96       	adiw	r26, 0x05	; 5
 516:	0c 90       	ld	r0, X
 518:	15 97       	sbiw	r26, 0x05	; 5
 51a:	02 c0       	rjmp	.+4      	; 0x520 <nRF24L01_begin+0x8c>
 51c:	44 0f       	add	r20, r20
 51e:	55 1f       	adc	r21, r21
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <nRF24L01_begin+0x88>
 524:	24 2f       	mov	r18, r20
 526:	20 95       	com	r18
 528:	23 23       	and	r18, r19
 52a:	20 83       	st	Z, r18
 52c:	2c b5       	in	r18, 0x2c	; 44
 52e:	20 61       	ori	r18, 0x10	; 16
 530:	2c bd       	out	0x2c, r18	; 44
 532:	2c b5       	in	r18, 0x2c	; 44
 534:	20 64       	ori	r18, 0x40	; 64
 536:	2c bd       	out	0x2c, r18	; 44
 538:	16 96       	adiw	r26, 0x06	; 6
 53a:	ed 91       	ld	r30, X+
 53c:	fc 91       	ld	r31, X
 53e:	17 97       	sbiw	r26, 0x07	; 7
 540:	42 91       	ld	r20, -Z
 542:	9c 01       	movw	r18, r24
 544:	18 96       	adiw	r26, 0x08	; 8
 546:	0c 90       	ld	r0, X
 548:	18 97       	sbiw	r26, 0x08	; 8
 54a:	02 c0       	rjmp	.+4      	; 0x550 <nRF24L01_begin+0xbc>
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <nRF24L01_begin+0xb8>
 554:	24 2b       	or	r18, r20
 556:	20 83       	st	Z, r18
 558:	19 96       	adiw	r26, 0x09	; 9
 55a:	ed 91       	ld	r30, X+
 55c:	fc 91       	ld	r31, X
 55e:	1a 97       	sbiw	r26, 0x0a	; 10
 560:	42 91       	ld	r20, -Z
 562:	9c 01       	movw	r18, r24
 564:	1b 96       	adiw	r26, 0x0b	; 11
 566:	0c 90       	ld	r0, X
 568:	1b 97       	sbiw	r26, 0x0b	; 11
 56a:	02 c0       	rjmp	.+4      	; 0x570 <nRF24L01_begin+0xdc>
 56c:	22 0f       	add	r18, r18
 56e:	33 1f       	adc	r19, r19
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <nRF24L01_begin+0xd8>
 574:	24 2b       	or	r18, r20
 576:	20 83       	st	Z, r18
 578:	1c 96       	adiw	r26, 0x0c	; 12
 57a:	ed 91       	ld	r30, X+
 57c:	fc 91       	ld	r31, X
 57e:	1d 97       	sbiw	r26, 0x0d	; 13
 580:	22 91       	ld	r18, -Z
 582:	1e 96       	adiw	r26, 0x0e	; 14
 584:	0c 90       	ld	r0, X
 586:	02 c0       	rjmp	.+4      	; 0x58c <nRF24L01_begin+0xf8>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <nRF24L01_begin+0xf4>
 590:	80 95       	com	r24
 592:	82 23       	and	r24, r18
 594:	80 83       	st	Z, r24
 596:	8c b5       	in	r24, 0x2c	; 44
 598:	87 7f       	andi	r24, 0xF7	; 247
 59a:	8c bd       	out	0x2c, r24	; 44
 59c:	8c b5       	in	r24, 0x2c	; 44
 59e:	8b 7f       	andi	r24, 0xFB	; 251
 5a0:	8c bd       	out	0x2c, r24	; 44
 5a2:	8c b5       	in	r24, 0x2c	; 44
 5a4:	8e 7f       	andi	r24, 0xFE	; 254
 5a6:	8c bd       	out	0x2c, r24	; 44
 5a8:	8c b5       	in	r24, 0x2c	; 44
 5aa:	8d 7f       	andi	r24, 0xFD	; 253
 5ac:	8c bd       	out	0x2c, r24	; 44
 5ae:	8d b5       	in	r24, 0x2d	; 45
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	8d bd       	out	0x2d, r24	; 45
 5b4:	8c b5       	in	r24, 0x2c	; 44
 5b6:	8f 7d       	andi	r24, 0xDF	; 223
 5b8:	8c bd       	out	0x2c, r24	; 44
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	62 ee       	ldi	r22, 0xE2	; 226
 5c4:	c8 01       	movw	r24, r16
 5c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <nRF24L01_send_command>
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	61 ee       	ldi	r22, 0xE1	; 225
 5d4:	c8 01       	movw	r24, r16
 5d6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <nRF24L01_send_command>
 5da:	c8 01       	movw	r24, r16
 5dc:	0e 94 37 02 	call	0x46e	; 0x46e <nRF24L01_clear_interrupts>
 5e0:	8f e0       	ldi	r24, 0x0F	; 15
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	21 e0       	ldi	r18, 0x01	; 1
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	ae 01       	movw	r20, r28
 5ea:	4f 5f       	subi	r20, 0xFF	; 255
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	c8 01       	movw	r24, r16
 5f2:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 5f6:	0f 2e       	mov	r0, r31
 5f8:	ff e3       	ldi	r31, 0x3F	; 63
 5fa:	ff 2e       	mov	r15, r31
 5fc:	f0 2d       	mov	r31, r0
 5fe:	f9 82       	std	Y+1, r15	; 0x01
 600:	21 e0       	ldi	r18, 0x01	; 1
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	ae 01       	movw	r20, r28
 606:	4f 5f       	subi	r20, 0xFF	; 255
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	c8 01       	movw	r24, r16
 60e:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 612:	f9 82       	std	Y+1, r15	; 0x01
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	ae 01       	movw	r20, r28
 61a:	4f 5f       	subi	r20, 0xFF	; 255
 61c:	5f 4f       	sbci	r21, 0xFF	; 255
 61e:	6c e1       	ldi	r22, 0x1C	; 28
 620:	c8 01       	movw	r24, r16
 622:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 626:	84 e0       	ldi	r24, 0x04	; 4
 628:	89 83       	std	Y+1, r24	; 0x01
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	ae 01       	movw	r20, r28
 630:	4f 5f       	subi	r20, 0xFF	; 255
 632:	5f 4f       	sbci	r21, 0xFF	; 255
 634:	6d e1       	ldi	r22, 0x1D	; 29
 636:	c8 01       	movw	r24, r16
 638:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 63c:	19 82       	std	Y+1, r1	; 0x01
 63e:	21 e0       	ldi	r18, 0x01	; 1
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	ae 01       	movw	r20, r28
 644:	4f 5f       	subi	r20, 0xFF	; 255
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	62 e0       	ldi	r22, 0x02	; 2
 64a:	c8 01       	movw	r24, r16
 64c:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
 650:	0f 90       	pop	r0
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	08 95       	ret

0000065e <nRF24L01_clear_receive_interrupt>:
void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
	uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
	nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_receive_interrupt(nRF24L01 *rf) {
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	1f 92       	push	r1
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	fc 01       	movw	r30, r24
	uint8_t data = _BV(RX_DR) | rf->status;
 66a:	97 85       	ldd	r25, Z+15	; 0x0f
 66c:	90 64       	ori	r25, 0x40	; 64
 66e:	99 83       	std	Y+1, r25	; 0x01
	nRF24L01_write_register(rf, STATUS, &data, 1);
 670:	21 e0       	ldi	r18, 0x01	; 1
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	ae 01       	movw	r20, r28
 676:	4f 5f       	subi	r20, 0xFF	; 255
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	67 e0       	ldi	r22, 0x07	; 7
 67c:	cf 01       	movw	r24, r30
 67e:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_write_register>
}
 682:	0f 90       	pop	r0
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <nRF24L01_read_received_data>:
	set_high(rf->ce);
}



bool nRF24L01_read_received_data(nRF24L01 *rf, nRF24L01Message *message) {
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	8c 01       	movw	r16, r24
 694:	eb 01       	movw	r28, r22
	message->pipe_number = nRF24L01_pipe_number_received(rf);
 696:	0e 94 09 02 	call	0x412	; 0x412 <nRF24L01_pipe_number_received>
 69a:	99 83       	std	Y+1, r25	; 0x01
 69c:	88 83       	st	Y, r24
	nRF24L01_clear_receive_interrupt(rf);
 69e:	c8 01       	movw	r24, r16
 6a0:	0e 94 2f 03 	call	0x65e	; 0x65e <nRF24L01_clear_receive_interrupt>
	if (message->pipe_number < 0) {
 6a4:	88 81       	ld	r24, Y
 6a6:	99 81       	ldd	r25, Y+1	; 0x01
 6a8:	99 23       	and	r25, r25
 6aa:	1c f4       	brge	.+6      	; 0x6b2 <nRF24L01_read_received_data+0x28>
		message->length = 0;
 6ac:	1a a2       	std	Y+34, r1	; 0x22
		return false;
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	17 c0       	rjmp	.+46     	; 0x6e0 <nRF24L01_read_received_data+0x56>
	}

	nRF24L01_read_register(rf, R_RX_PL_WID, &message->length, 1);
 6b2:	21 e0       	ldi	r18, 0x01	; 1
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	ae 01       	movw	r20, r28
 6b8:	4e 5d       	subi	r20, 0xDE	; 222
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	60 e6       	ldi	r22, 0x60	; 96
 6be:	c8 01       	movw	r24, r16
 6c0:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_read_register>

	if (message->length > 0) {
 6c4:	2a a1       	ldd	r18, Y+34	; 0x22
 6c6:	22 23       	and	r18, r18
 6c8:	51 f0       	breq	.+20     	; 0x6de <nRF24L01_read_received_data+0x54>
		nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	ae 01       	movw	r20, r28
 6ce:	4e 5f       	subi	r20, 0xFE	; 254
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	61 e6       	ldi	r22, 0x61	; 97
 6d4:	c8 01       	movw	r24, r16
 6d6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <nRF24L01_send_command>
		message->length);
	}

	return true;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <nRF24L01_read_received_data+0x56>
 6de:	81 e0       	ldi	r24, 0x01	; 1
}
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	08 95       	ret

000006ea <malloc>:
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	82 30       	cpi	r24, 0x02	; 2
 6f4:	91 05       	cpc	r25, r1
 6f6:	10 f4       	brcc	.+4      	; 0x6fc <malloc+0x12>
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <__flp>
 700:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <__flp+0x1>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	a0 e0       	ldi	r26, 0x00	; 0
 70a:	b0 e0       	ldi	r27, 0x00	; 0
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	19 f1       	breq	.+70     	; 0x756 <malloc+0x6c>
 710:	40 81       	ld	r20, Z
 712:	51 81       	ldd	r21, Z+1	; 0x01
 714:	02 81       	ldd	r16, Z+2	; 0x02
 716:	13 81       	ldd	r17, Z+3	; 0x03
 718:	48 17       	cp	r20, r24
 71a:	59 07       	cpc	r21, r25
 71c:	c8 f0       	brcs	.+50     	; 0x750 <malloc+0x66>
 71e:	84 17       	cp	r24, r20
 720:	95 07       	cpc	r25, r21
 722:	69 f4       	brne	.+26     	; 0x73e <malloc+0x54>
 724:	10 97       	sbiw	r26, 0x00	; 0
 726:	31 f0       	breq	.+12     	; 0x734 <malloc+0x4a>
 728:	12 96       	adiw	r26, 0x02	; 2
 72a:	0c 93       	st	X, r16
 72c:	12 97       	sbiw	r26, 0x02	; 2
 72e:	13 96       	adiw	r26, 0x03	; 3
 730:	1c 93       	st	X, r17
 732:	27 c0       	rjmp	.+78     	; 0x782 <malloc+0x98>
 734:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <__flp>
 738:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <__flp+0x1>
 73c:	22 c0       	rjmp	.+68     	; 0x782 <malloc+0x98>
 73e:	21 15       	cp	r18, r1
 740:	31 05       	cpc	r19, r1
 742:	19 f0       	breq	.+6      	; 0x74a <malloc+0x60>
 744:	42 17       	cp	r20, r18
 746:	53 07       	cpc	r21, r19
 748:	18 f4       	brcc	.+6      	; 0x750 <malloc+0x66>
 74a:	9a 01       	movw	r18, r20
 74c:	bd 01       	movw	r22, r26
 74e:	ef 01       	movw	r28, r30
 750:	df 01       	movw	r26, r30
 752:	f8 01       	movw	r30, r16
 754:	db cf       	rjmp	.-74     	; 0x70c <malloc+0x22>
 756:	21 15       	cp	r18, r1
 758:	31 05       	cpc	r19, r1
 75a:	f9 f0       	breq	.+62     	; 0x79a <malloc+0xb0>
 75c:	28 1b       	sub	r18, r24
 75e:	39 0b       	sbc	r19, r25
 760:	24 30       	cpi	r18, 0x04	; 4
 762:	31 05       	cpc	r19, r1
 764:	80 f4       	brcc	.+32     	; 0x786 <malloc+0x9c>
 766:	8a 81       	ldd	r24, Y+2	; 0x02
 768:	9b 81       	ldd	r25, Y+3	; 0x03
 76a:	61 15       	cp	r22, r1
 76c:	71 05       	cpc	r23, r1
 76e:	21 f0       	breq	.+8      	; 0x778 <malloc+0x8e>
 770:	fb 01       	movw	r30, r22
 772:	93 83       	std	Z+3, r25	; 0x03
 774:	82 83       	std	Z+2, r24	; 0x02
 776:	04 c0       	rjmp	.+8      	; 0x780 <malloc+0x96>
 778:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__flp+0x1>
 77c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__flp>
 780:	fe 01       	movw	r30, r28
 782:	32 96       	adiw	r30, 0x02	; 2
 784:	44 c0       	rjmp	.+136    	; 0x80e <malloc+0x124>
 786:	fe 01       	movw	r30, r28
 788:	e2 0f       	add	r30, r18
 78a:	f3 1f       	adc	r31, r19
 78c:	81 93       	st	Z+, r24
 78e:	91 93       	st	Z+, r25
 790:	22 50       	subi	r18, 0x02	; 2
 792:	31 09       	sbc	r19, r1
 794:	39 83       	std	Y+1, r19	; 0x01
 796:	28 83       	st	Y, r18
 798:	3a c0       	rjmp	.+116    	; 0x80e <malloc+0x124>
 79a:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <__brkval>
 79e:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__brkval+0x1>
 7a2:	23 2b       	or	r18, r19
 7a4:	41 f4       	brne	.+16     	; 0x7b6 <malloc+0xcc>
 7a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7ae:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <__brkval+0x1>
 7b2:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <__brkval>
 7b6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7ba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7be:	21 15       	cp	r18, r1
 7c0:	31 05       	cpc	r19, r1
 7c2:	41 f4       	brne	.+16     	; 0x7d4 <malloc+0xea>
 7c4:	2d b7       	in	r18, 0x3d	; 61
 7c6:	3e b7       	in	r19, 0x3e	; 62
 7c8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7cc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7d0:	24 1b       	sub	r18, r20
 7d2:	35 0b       	sbc	r19, r21
 7d4:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <__brkval>
 7d8:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <__brkval+0x1>
 7dc:	e2 17       	cp	r30, r18
 7de:	f3 07       	cpc	r31, r19
 7e0:	a0 f4       	brcc	.+40     	; 0x80a <malloc+0x120>
 7e2:	2e 1b       	sub	r18, r30
 7e4:	3f 0b       	sbc	r19, r31
 7e6:	28 17       	cp	r18, r24
 7e8:	39 07       	cpc	r19, r25
 7ea:	78 f0       	brcs	.+30     	; 0x80a <malloc+0x120>
 7ec:	ac 01       	movw	r20, r24
 7ee:	4e 5f       	subi	r20, 0xFE	; 254
 7f0:	5f 4f       	sbci	r21, 0xFF	; 255
 7f2:	24 17       	cp	r18, r20
 7f4:	35 07       	cpc	r19, r21
 7f6:	48 f0       	brcs	.+18     	; 0x80a <malloc+0x120>
 7f8:	4e 0f       	add	r20, r30
 7fa:	5f 1f       	adc	r21, r31
 7fc:	50 93 28 01 	sts	0x0128, r21	; 0x800128 <__brkval+0x1>
 800:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <__brkval>
 804:	81 93       	st	Z+, r24
 806:	91 93       	st	Z+, r25
 808:	02 c0       	rjmp	.+4      	; 0x80e <malloc+0x124>
 80a:	e0 e0       	ldi	r30, 0x00	; 0
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	cf 01       	movw	r24, r30
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	08 95       	ret

0000081a <free>:
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	09 f4       	brne	.+2      	; 0x824 <free+0xa>
 822:	81 c0       	rjmp	.+258    	; 0x926 <__stack+0x27>
 824:	fc 01       	movw	r30, r24
 826:	32 97       	sbiw	r30, 0x02	; 2
 828:	13 82       	std	Z+3, r1	; 0x03
 82a:	12 82       	std	Z+2, r1	; 0x02
 82c:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <__flp>
 830:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <__flp+0x1>
 834:	10 97       	sbiw	r26, 0x00	; 0
 836:	81 f4       	brne	.+32     	; 0x858 <free+0x3e>
 838:	20 81       	ld	r18, Z
 83a:	31 81       	ldd	r19, Z+1	; 0x01
 83c:	82 0f       	add	r24, r18
 83e:	93 1f       	adc	r25, r19
 840:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <__brkval>
 844:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__brkval+0x1>
 848:	28 17       	cp	r18, r24
 84a:	39 07       	cpc	r19, r25
 84c:	51 f5       	brne	.+84     	; 0x8a2 <free+0x88>
 84e:	f0 93 28 01 	sts	0x0128, r31	; 0x800128 <__brkval+0x1>
 852:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <__brkval>
 856:	67 c0       	rjmp	.+206    	; 0x926 <__stack+0x27>
 858:	ed 01       	movw	r28, r26
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	ce 17       	cp	r28, r30
 860:	df 07       	cpc	r29, r31
 862:	40 f4       	brcc	.+16     	; 0x874 <free+0x5a>
 864:	4a 81       	ldd	r20, Y+2	; 0x02
 866:	5b 81       	ldd	r21, Y+3	; 0x03
 868:	9e 01       	movw	r18, r28
 86a:	41 15       	cp	r20, r1
 86c:	51 05       	cpc	r21, r1
 86e:	f1 f0       	breq	.+60     	; 0x8ac <free+0x92>
 870:	ea 01       	movw	r28, r20
 872:	f5 cf       	rjmp	.-22     	; 0x85e <free+0x44>
 874:	d3 83       	std	Z+3, r29	; 0x03
 876:	c2 83       	std	Z+2, r28	; 0x02
 878:	40 81       	ld	r20, Z
 87a:	51 81       	ldd	r21, Z+1	; 0x01
 87c:	84 0f       	add	r24, r20
 87e:	95 1f       	adc	r25, r21
 880:	c8 17       	cp	r28, r24
 882:	d9 07       	cpc	r29, r25
 884:	59 f4       	brne	.+22     	; 0x89c <free+0x82>
 886:	88 81       	ld	r24, Y
 888:	99 81       	ldd	r25, Y+1	; 0x01
 88a:	84 0f       	add	r24, r20
 88c:	95 1f       	adc	r25, r21
 88e:	02 96       	adiw	r24, 0x02	; 2
 890:	91 83       	std	Z+1, r25	; 0x01
 892:	80 83       	st	Z, r24
 894:	8a 81       	ldd	r24, Y+2	; 0x02
 896:	9b 81       	ldd	r25, Y+3	; 0x03
 898:	93 83       	std	Z+3, r25	; 0x03
 89a:	82 83       	std	Z+2, r24	; 0x02
 89c:	21 15       	cp	r18, r1
 89e:	31 05       	cpc	r19, r1
 8a0:	29 f4       	brne	.+10     	; 0x8ac <free+0x92>
 8a2:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <__flp+0x1>
 8a6:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <__flp>
 8aa:	3d c0       	rjmp	.+122    	; 0x926 <__stack+0x27>
 8ac:	e9 01       	movw	r28, r18
 8ae:	fb 83       	std	Y+3, r31	; 0x03
 8b0:	ea 83       	std	Y+2, r30	; 0x02
 8b2:	49 91       	ld	r20, Y+
 8b4:	59 91       	ld	r21, Y+
 8b6:	c4 0f       	add	r28, r20
 8b8:	d5 1f       	adc	r29, r21
 8ba:	ec 17       	cp	r30, r28
 8bc:	fd 07       	cpc	r31, r29
 8be:	61 f4       	brne	.+24     	; 0x8d8 <free+0xbe>
 8c0:	80 81       	ld	r24, Z
 8c2:	91 81       	ldd	r25, Z+1	; 0x01
 8c4:	84 0f       	add	r24, r20
 8c6:	95 1f       	adc	r25, r21
 8c8:	02 96       	adiw	r24, 0x02	; 2
 8ca:	e9 01       	movw	r28, r18
 8cc:	99 83       	std	Y+1, r25	; 0x01
 8ce:	88 83       	st	Y, r24
 8d0:	82 81       	ldd	r24, Z+2	; 0x02
 8d2:	93 81       	ldd	r25, Z+3	; 0x03
 8d4:	9b 83       	std	Y+3, r25	; 0x03
 8d6:	8a 83       	std	Y+2, r24	; 0x02
 8d8:	e0 e0       	ldi	r30, 0x00	; 0
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	12 96       	adiw	r26, 0x02	; 2
 8de:	8d 91       	ld	r24, X+
 8e0:	9c 91       	ld	r25, X
 8e2:	13 97       	sbiw	r26, 0x03	; 3
 8e4:	00 97       	sbiw	r24, 0x00	; 0
 8e6:	19 f0       	breq	.+6      	; 0x8ee <free+0xd4>
 8e8:	fd 01       	movw	r30, r26
 8ea:	dc 01       	movw	r26, r24
 8ec:	f7 cf       	rjmp	.-18     	; 0x8dc <free+0xc2>
 8ee:	8d 91       	ld	r24, X+
 8f0:	9c 91       	ld	r25, X
 8f2:	11 97       	sbiw	r26, 0x01	; 1
 8f4:	9d 01       	movw	r18, r26
 8f6:	2e 5f       	subi	r18, 0xFE	; 254
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	82 0f       	add	r24, r18
 8fc:	93 1f       	adc	r25, r19
 8fe:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <__brkval>
 902:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__brkval+0x1>
 906:	28 17       	cp	r18, r24
 908:	39 07       	cpc	r19, r25
 90a:	69 f4       	brne	.+26     	; 0x926 <__stack+0x27>
 90c:	30 97       	sbiw	r30, 0x00	; 0
 90e:	29 f4       	brne	.+10     	; 0x91a <__stack+0x1b>
 910:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__flp+0x1>
 914:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__flp>
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
 91a:	13 82       	std	Z+3, r1	; 0x03
 91c:	12 82       	std	Z+2, r1	; 0x02
 91e:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <__brkval+0x1>
 922:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <__brkval>
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	08 95       	ret

0000092c <strcmp>:
 92c:	fb 01       	movw	r30, r22
 92e:	dc 01       	movw	r26, r24
 930:	8d 91       	ld	r24, X+
 932:	01 90       	ld	r0, Z+
 934:	80 19       	sub	r24, r0
 936:	01 10       	cpse	r0, r1
 938:	d9 f3       	breq	.-10     	; 0x930 <strcmp+0x4>
 93a:	99 0b       	sbc	r25, r25
 93c:	08 95       	ret

0000093e <_exit>:
 93e:	f8 94       	cli

00000940 <__stop_program>:
 940:	ff cf       	rjmp	.-2      	; 0x940 <__stop_program>
