
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000165e  000016f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000165e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800126  00800126  00001718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002340  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c00  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e32  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000544  00000000  00000000  0000569c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e9  00000000  00000000  00005be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001978  00000000  00000000  000063c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00007d41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_1>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_11>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <nRF24L01_transmit+0xbc>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <nRF24L01_send_command+0x68>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <getLux+0x150>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <i2c_start+0x26>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ee e5       	ldi	r30, 0x5E	; 94
     176:	f6 e1       	ldi	r31, 0x16	; 22
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a6 32       	cpi	r26, 0x26	; 38
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a6 e2       	ldi	r26, 0x26	; 38
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	ac 32       	cpi	r26, 0x2C	; 44
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
     198:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     1a0:	88 e4       	ldi	r24, 0x48	; 72
     1a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1a6:	08 95       	ret

000001a8 <i2c_start>:
     1a8:	ec eb       	ldi	r30, 0xBC	; 188
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	10 82       	st	Z, r1
     1ae:	94 ea       	ldi	r25, 0xA4	; 164
     1b0:	90 83       	st	Z, r25
     1b2:	90 81       	ld	r25, Z
     1b4:	99 23       	and	r25, r25
     1b6:	ec f7       	brge	.-6      	; 0x1b2 <i2c_start+0xa>
     1b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1bc:	98 7f       	andi	r25, 0xF8	; 248
     1be:	98 30       	cpi	r25, 0x08	; 8
     1c0:	a1 f4       	brne	.+40     	; 0x1ea <i2c_start+0x42>
     1c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1c6:	84 e8       	ldi	r24, 0x84	; 132
     1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1cc:	ec eb       	ldi	r30, 0xBC	; 188
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	88 23       	and	r24, r24
     1d4:	ec f7       	brge	.-6      	; 0x1d0 <i2c_start+0x28>
     1d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1da:	98 7f       	andi	r25, 0xF8	; 248
     1dc:	98 31       	cpi	r25, 0x18	; 24
     1de:	39 f0       	breq	.+14     	; 0x1ee <i2c_start+0x46>
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 34       	cpi	r25, 0x40	; 64
     1e4:	29 f4       	brne	.+10     	; 0x1f0 <i2c_start+0x48>
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	08 95       	ret
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	08 95       	ret
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	08 95       	ret

000001f2 <i2c_write>:
     1f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1f6:	84 e8       	ldi	r24, 0x84	; 132
     1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1fc:	ec eb       	ldi	r30, 0xBC	; 188
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	88 23       	and	r24, r24
     204:	ec f7       	brge	.-6      	; 0x200 <i2c_write+0xe>
     206:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     20a:	98 7f       	andi	r25, 0xF8	; 248
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	98 32       	cpi	r25, 0x28	; 40
     210:	09 f4       	brne	.+2      	; 0x214 <i2c_write+0x22>
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	08 95       	ret

00000216 <i2c_read_ack>:
     216:	84 ec       	ldi	r24, 0xC4	; 196
     218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     21c:	ec eb       	ldi	r30, 0xBC	; 188
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 23       	and	r24, r24
     224:	ec f7       	brge	.-6      	; 0x220 <i2c_read_ack+0xa>
     226:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     22a:	08 95       	ret

0000022c <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     22c:	84 e9       	ldi	r24, 0x94	; 148
     22e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     232:	08 95       	ret

00000234 <uart_putc>:
	else
	TWCR = ( 1 << TWINT) | ( 1 << TWEN);
	while ((TWCR & ( 1 << TWINT)) == 0);
	return TWDR;
	
}
     234:	e0 ec       	ldi	r30, 0xC0	; 192
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	90 81       	ld	r25, Z
     23a:	95 ff       	sbrs	r25, 5
     23c:	fd cf       	rjmp	.-6      	; 0x238 <uart_putc+0x4>
     23e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     242:	08 95       	ret

00000244 <uart_puts>:
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	ec 01       	movw	r28, r24
     24a:	88 81       	ld	r24, Y
     24c:	88 23       	and	r24, r24
     24e:	31 f0       	breq	.+12     	; 0x25c <uart_puts+0x18>
     250:	21 96       	adiw	r28, 0x01	; 1
     252:	0e 94 1a 01 	call	0x234	; 0x234 <uart_putc>
     256:	89 91       	ld	r24, Y+
     258:	81 11       	cpse	r24, r1
     25a:	fb cf       	rjmp	.-10     	; 0x252 <uart_puts+0xe>
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <init_TSL2591>:
     262:	82 e5       	ldi	r24, 0x52	; 82
     264:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_start>
     268:	80 ea       	ldi	r24, 0xA0	; 160
     26a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <i2c_write>
     26e:	8b e9       	ldi	r24, 0x9B	; 155
     270:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <i2c_write>
     274:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_stop>
     278:	82 e5       	ldi	r24, 0x52	; 82
     27a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_start>
     27e:	81 ea       	ldi	r24, 0xA1	; 161
     280:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <i2c_write>
     284:	80 e1       	ldi	r24, 0x10	; 16
     286:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <i2c_write>
     28a:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_stop>
     28e:	08 95       	ret

00000290 <getLux>:
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	cf 93       	push	r28
     2aa:	82 e5       	ldi	r24, 0x52	; 82
     2ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_start>
     2b0:	84 eb       	ldi	r24, 0xB4	; 180
     2b2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <i2c_write>
     2b6:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_stop>
     2ba:	83 e5       	ldi	r24, 0x53	; 83
     2bc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_start>
     2c0:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_read_ack>
     2c4:	c8 2e       	mov	r12, r24
     2c6:	d1 2c       	mov	r13, r1
     2c8:	dc 2c       	mov	r13, r12
     2ca:	cc 24       	eor	r12, r12
     2cc:	0d 2c       	mov	r0, r13
     2ce:	00 0c       	add	r0, r0
     2d0:	ee 08       	sbc	r14, r14
     2d2:	ff 08       	sbc	r15, r15
     2d4:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_read_ack>
     2d8:	c8 2a       	or	r12, r24
     2da:	76 01       	movw	r14, r12
     2dc:	dd 24       	eor	r13, r13
     2de:	cc 24       	eor	r12, r12
     2e0:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_read_ack>
     2e4:	c8 2f       	mov	r28, r24
     2e6:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_read_ack>
     2ea:	4c 2f       	mov	r20, r28
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	54 2f       	mov	r21, r20
     2f0:	44 27       	eor	r20, r20
     2f2:	05 2e       	mov	r0, r21
     2f4:	00 0c       	add	r0, r0
     2f6:	66 0b       	sbc	r22, r22
     2f8:	77 0b       	sbc	r23, r23
     2fa:	48 2b       	or	r20, r24
     2fc:	c4 2a       	or	r12, r20
     2fe:	d5 2a       	or	r13, r21
     300:	e6 2a       	or	r14, r22
     302:	f7 2a       	or	r15, r23
     304:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_stop>
     308:	b6 01       	movw	r22, r12
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 54 06 	call	0xca8	; 0xca8 <__floatunsisf>
     312:	4b 01       	movw	r8, r22
     314:	5c 01       	movw	r10, r24
     316:	cd 2c       	mov	r12, r13
     318:	de 2c       	mov	r13, r14
     31a:	ef 2c       	mov	r14, r15
     31c:	ff 24       	eor	r15, r15
     31e:	b6 01       	movw	r22, r12
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 54 06 	call	0xca8	; 0xca8 <__floatunsisf>
     328:	2b 01       	movw	r4, r22
     32a:	3c 01       	movw	r6, r24
     32c:	25 e8       	ldi	r18, 0x85	; 133
     32e:	3b ee       	ldi	r19, 0xEB	; 235
     330:	41 ed       	ldi	r20, 0xD1	; 209
     332:	5f e3       	ldi	r21, 0x3F	; 63
     334:	0e 94 e7 06 	call	0xdce	; 0xdce <__mulsf3>
     338:	9b 01       	movw	r18, r22
     33a:	ac 01       	movw	r20, r24
     33c:	c5 01       	movw	r24, r10
     33e:	b4 01       	movw	r22, r8
     340:	0e 94 46 05 	call	0xa8c	; 0xa8c <__subsf3>
     344:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixunssfsi>
     348:	0e 94 54 06 	call	0xca8	; 0xca8 <__floatunsisf>
     34c:	24 e1       	ldi	r18, 0x14	; 20
     34e:	34 e1       	ldi	r19, 0x14	; 20
     350:	44 ec       	ldi	r20, 0xC4	; 196
     352:	50 e4       	ldi	r21, 0x40	; 64
     354:	0e 94 b3 05 	call	0xb66	; 0xb66 <__divsf3>
     358:	d6 2e       	mov	r13, r22
     35a:	e7 2e       	mov	r14, r23
     35c:	f8 2e       	mov	r15, r24
     35e:	c9 2f       	mov	r28, r25
     360:	2d e3       	ldi	r18, 0x3D	; 61
     362:	3a e0       	ldi	r19, 0x0A	; 10
     364:	47 e1       	ldi	r20, 0x17	; 23
     366:	5f e3       	ldi	r21, 0x3F	; 63
     368:	c5 01       	movw	r24, r10
     36a:	b4 01       	movw	r22, r8
     36c:	0e 94 e7 06 	call	0xdce	; 0xdce <__mulsf3>
     370:	4b 01       	movw	r8, r22
     372:	5c 01       	movw	r10, r24
     374:	26 ef       	ldi	r18, 0xF6	; 246
     376:	38 e2       	ldi	r19, 0x28	; 40
     378:	4c e5       	ldi	r20, 0x5C	; 92
     37a:	5f e3       	ldi	r21, 0x3F	; 63
     37c:	c3 01       	movw	r24, r6
     37e:	b2 01       	movw	r22, r4
     380:	0e 94 e7 06 	call	0xdce	; 0xdce <__mulsf3>
     384:	9b 01       	movw	r18, r22
     386:	ac 01       	movw	r20, r24
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	0e 94 46 05 	call	0xa8c	; 0xa8c <__subsf3>
     390:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixunssfsi>
     394:	0e 94 54 06 	call	0xca8	; 0xca8 <__floatunsisf>
     398:	24 e1       	ldi	r18, 0x14	; 20
     39a:	34 e1       	ldi	r19, 0x14	; 20
     39c:	44 ec       	ldi	r20, 0xC4	; 196
     39e:	50 e4       	ldi	r21, 0x40	; 64
     3a0:	0e 94 b3 05 	call	0xb66	; 0xb66 <__divsf3>
     3a4:	96 2e       	mov	r9, r22
     3a6:	a7 2e       	mov	r10, r23
     3a8:	b8 2e       	mov	r11, r24
     3aa:	c9 2e       	mov	r12, r25
     3ac:	26 2f       	mov	r18, r22
     3ae:	37 2f       	mov	r19, r23
     3b0:	48 2f       	mov	r20, r24
     3b2:	59 2f       	mov	r21, r25
     3b4:	6d 2d       	mov	r22, r13
     3b6:	7e 2d       	mov	r23, r14
     3b8:	8f 2d       	mov	r24, r15
     3ba:	9c 2f       	mov	r25, r28
     3bc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__gesf2>
     3c0:	18 16       	cp	r1, r24
     3c2:	24 f0       	brlt	.+8      	; 0x3cc <getLux+0x13c>
     3c4:	d9 2c       	mov	r13, r9
     3c6:	ea 2c       	mov	r14, r10
     3c8:	fb 2c       	mov	r15, r11
     3ca:	cc 2d       	mov	r28, r12
     3cc:	6d 2d       	mov	r22, r13
     3ce:	7e 2d       	mov	r23, r14
     3d0:	8f 2d       	mov	r24, r15
     3d2:	9c 2f       	mov	r25, r28
     3d4:	cf 91       	pop	r28
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	bf 90       	pop	r11
     3e0:	af 90       	pop	r10
     3e2:	9f 90       	pop	r9
     3e4:	8f 90       	pop	r8
     3e6:	7f 90       	pop	r7
     3e8:	6f 90       	pop	r6
     3ea:	5f 90       	pop	r5
     3ec:	4f 90       	pop	r4
     3ee:	08 95       	ret

000003f0 <setup_rf>:
			nRF24L01_transmit(rf, to_address, &msg);
		}
	}
	return 0;
}
nRF24L01 *setup_rf(void) {
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
     3f4:	0e 94 19 03 	call	0x632	; 0x632 <nRF24L01_init>
     3f8:	ec 01       	movw	r28, r24

rf->ss.port = &PORTB;
     3fa:	85 e2       	ldi	r24, 0x25	; 37
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	99 83       	std	Y+1, r25	; 0x01
     400:	88 83       	st	Y, r24
rf->ss.pin = PB2;
     402:	22 e0       	ldi	r18, 0x02	; 2
     404:	2a 83       	std	Y+2, r18	; 0x02
rf->ce.port = &PORTB;
     406:	9c 83       	std	Y+4, r25	; 0x04
     408:	8b 83       	std	Y+3, r24	; 0x03
rf->ce.pin = PB1;
     40a:	21 e0       	ldi	r18, 0x01	; 1
     40c:	2d 83       	std	Y+5, r18	; 0x05
rf->sck.port = &PORTB;
     40e:	9f 83       	std	Y+7, r25	; 0x07
     410:	8e 83       	std	Y+6, r24	; 0x06
rf->sck.pin = PB5;
     412:	25 e0       	ldi	r18, 0x05	; 5
     414:	28 87       	std	Y+8, r18	; 0x08
rf->mosi.port = &PORTB;
     416:	9a 87       	std	Y+10, r25	; 0x0a
     418:	89 87       	std	Y+9, r24	; 0x09
rf->mosi.pin = PB3;
     41a:	23 e0       	ldi	r18, 0x03	; 3
     41c:	2b 87       	std	Y+11, r18	; 0x0b
rf->miso.port = &PORTB;
     41e:	9d 87       	std	Y+13, r25	; 0x0d
     420:	8c 87       	std	Y+12, r24	; 0x0c
rf->miso.pin = PB4;
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	8e 87       	std	Y+14, r24	; 0x0e
// interrupt on falling edge of INT0 (PD2)
EICRA |= _BV(ISC01);
     426:	e9 e6       	ldi	r30, 0x69	; 105
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	80 83       	st	Z, r24
EIMSK |= _BV(INT0);
     430:	e8 9a       	sbi	0x1d, 0	; 29
nRF24L01_begin(rf);
     432:	ce 01       	movw	r24, r28
     434:	0e 94 8b 03 	call	0x716	; 0x716 <nRF24L01_begin>
return rf;
}
     438:	ce 01       	movw	r24, r28
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <setup_timer>:
// setup timer to trigger interrupt every second when at 1MHz
void setup_timer(void) {
	TCCR1B |= _BV(WGM12);
     440:	e1 e8       	ldi	r30, 0x81	; 129
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	88 60       	ori	r24, 0x08	; 8
     448:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);
     44a:	af e6       	ldi	r26, 0x6F	; 111
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	8c 91       	ld	r24, X
     450:	82 60       	ori	r24, 0x02	; 2
     452:	8c 93       	st	X, r24
	OCR1A = 15624;
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	9d e3       	ldi	r25, 0x3D	; 61
     458:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     45c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= _BV(CS10) | _BV(CS11);
     460:	80 81       	ld	r24, Z
     462:	83 60       	ori	r24, 0x03	; 3
     464:	80 83       	st	Z, r24
     466:	08 95       	ret

00000468 <USART_init>:
}

/* INIT USART (RS-232) */
void USART_init( unsigned int ubrr ) {
	UBRR0H = (unsigned char)(ubrr>>8);
     468:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
     46c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0)| ( 1 << RXCIE0); // Enable receiver, transmitter & RX interrupt
     470:	e1 ec       	ldi	r30, 0xC1	; 193
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	88 69       	ori	r24, 0x98	; 152
     478:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
     47a:	e2 ec       	ldi	r30, 0xC2	; 194
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	86 60       	ori	r24, 0x06	; 6
     482:	80 83       	st	Z, r24
     484:	08 95       	ret

00000486 <USART_tx_string>:
}

void USART_tx_string( char *data ) {
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
	while ((*data != '\0')) {
     48a:	fc 01       	movw	r30, r24
     48c:	20 81       	ld	r18, Z
     48e:	22 23       	and	r18, r18
     490:	69 f0       	breq	.+26     	; 0x4ac <USART_tx_string+0x26>
     492:	dc 01       	movw	r26, r24
     494:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1 <<UDRE0)));
     496:	e0 ec       	ldi	r30, 0xC0	; 192
     498:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
     49a:	c6 ec       	ldi	r28, 0xC6	; 198
     49c:	d0 e0       	ldi	r29, 0x00	; 0
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
		while (!(UCSR0A & (1 <<UDRE0)));
     49e:	90 81       	ld	r25, Z
     4a0:	95 ff       	sbrs	r25, 5
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <USART_tx_string+0x18>
		UDR0 = *data;
     4a4:	28 83       	st	Y, r18
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0)| ( 1 << RXCIE0); // Enable receiver, transmitter & RX interrupt
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
     4a6:	2d 91       	ld	r18, X+
     4a8:	21 11       	cpse	r18, r1
     4aa:	f9 cf       	rjmp	.-14     	; 0x49e <USART_tx_string+0x18>
		while (!(UCSR0A & (1 <<UDRE0)));
		UDR0 = *data;
		data++;
	}
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <main>:
char outs[256]; //array

volatile char received_data;


int main(void) {
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	ae 97       	sbiw	r28, 0x2e	; 46
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
	uint8_t to_address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
     4c6:	85 e0       	ldi	r24, 0x05	; 5
     4c8:	e6 e0       	ldi	r30, 0x06	; 6
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	de 01       	movw	r26, r28
     4ce:	11 96       	adiw	r26, 0x01	; 1
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	8a 95       	dec	r24
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <main+0x1e>
	bool on = false;
	char buffer[6];
	float alux;
	char str[80];
	DDRD = (1<<PD5) |(1<<PD6)|(1<<PD7);
     4d8:	80 ee       	ldi	r24, 0xE0	; 224
     4da:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b11100000;
     4dc:	8b b9       	out	0x0b, r24	; 11
	
	USART_init(MYUBRR); // Initialize the USART (RS232 interface)
     4de:	87 e6       	ldi	r24, 0x67	; 103
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 34 02 	call	0x468	; 0x468 <USART_init>
	
	i2c_init();
     4e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_init>
	init_TSL2591();
     4ea:	0e 94 31 01 	call	0x262	; 0x262 <init_TSL2591>
		
	USART_tx_string("Connected!\r\n"); // shows theres a connection with USART
     4ee:	8b e0       	ldi	r24, 0x0B	; 11
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 43 02 	call	0x486	; 0x486 <USART_tx_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f6:	2f e7       	ldi	r18, 0x7F	; 127
     4f8:	8a e1       	ldi	r24, 0x1A	; 26
     4fa:	96 e0       	ldi	r25, 0x06	; 6
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	80 40       	sbci	r24, 0x00	; 0
     500:	90 40       	sbci	r25, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <main+0x4a>
     504:	00 c0       	rjmp	.+0      	; 0x506 <main+0x54>
     506:	00 00       	nop
	_delay_ms(125); // wait a bit
	
	sei();
     508:	78 94       	sei
	nRF24L01 *rf = setup_rf();
     50a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <setup_rf>
     50e:	7c 01       	movw	r14, r24
	setup_timer();
     510:	0e 94 20 02 	call	0x440	; 0x440 <setup_timer>
volatile char received_data;


int main(void) {
	uint8_t to_address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
	bool on = false;
     514:	71 2c       	mov	r7, r1
			if (success != 0)
			nRF24L01_flush_transmit_message(rf);
		}
		if (send_message) {
			send_message = false;
			on = !on;
     516:	66 24       	eor	r6, r6
     518:	63 94       	inc	r6
				strcat(msg.data, buffer);
				_delay_ms(1000);
				uart_puts(msg.data);
				uart_puts("  \r\n");
			}
			else memcpy(msg.data, "OFF", 4);
     51a:	6e 01       	movw	r12, r28
     51c:	ee e0       	ldi	r30, 0x0E	; 14
     51e:	ce 0e       	add	r12, r30
     520:	d1 1c       	adc	r13, r1
     522:	0f 2e       	mov	r0, r31
     524:	ff e4       	ldi	r31, 0x4F	; 79
     526:	8f 2e       	mov	r8, r31
     528:	f6 e4       	ldi	r31, 0x46	; 70
     52a:	9f 2e       	mov	r9, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	0f 2e       	mov	r0, r31
     530:	f6 e4       	ldi	r31, 0x46	; 70
     532:	af 2e       	mov	r10, r31
     534:	b1 2c       	mov	r11, r1
     536:	f0 2d       	mov	r31, r0
	sei();
	nRF24L01 *rf = setup_rf();
	setup_timer();

	while (true) {
		alux = getLux();
     538:	0e 94 48 01 	call	0x290	; 0x290 <getLux>
		dtostrf(alux, 6, 2, buffer);
     53c:	8e 01       	movw	r16, r28
     53e:	0a 5f       	subi	r16, 0xFA	; 250
     540:	1f 4f       	sbci	r17, 0xFF	; 255
     542:	22 e0       	ldi	r18, 0x02	; 2
     544:	46 e0       	ldi	r20, 0x06	; 6
     546:	0e 94 78 07 	call	0xef0	; 0xef0 <dtostrf>

			//	_delay_ms(10000);
		if (rf_interrupt) {
     54a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <rf_interrupt>
     54e:	88 23       	and	r24, r24
     550:	51 f0       	breq	.+20     	; 0x566 <main+0xb4>
			rf_interrupt = false;
     552:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <rf_interrupt>
			int success = nRF24L01_transmit_success(rf);
     556:	c7 01       	movw	r24, r14
     558:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <nRF24L01_transmit_success>
			if (success != 0)
     55c:	89 2b       	or	r24, r25
     55e:	19 f0       	breq	.+6      	; 0x566 <main+0xb4>
			nRF24L01_flush_transmit_message(rf);
     560:	c7 01       	movw	r24, r14
     562:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nRF24L01_flush_transmit_message>
		}
		if (send_message) {
     566:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     56a:	88 23       	and	r24, r24
     56c:	29 f3       	breq	.-54     	; 0x538 <main+0x86>
			send_message = false;
     56e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
			on = !on;
     572:	76 24       	eor	r7, r6
			nRF24L01Message msg;

			if (on){
     574:	f9 f0       	breq	.+62     	; 0x5b4 <main+0x102>
				strcpy(msg.data, "NODE1: ");
     576:	88 e0       	ldi	r24, 0x08	; 8
     578:	e8 e1       	ldi	r30, 0x18	; 24
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	d6 01       	movw	r26, r12
     57e:	01 90       	ld	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	8a 95       	dec	r24
     584:	e1 f7       	brne	.-8      	; 0x57e <main+0xcc>
			//	memcpy(msg.data, buffer, 10);
				strcat(msg.data, buffer);
     586:	be 01       	movw	r22, r28
     588:	6a 5f       	subi	r22, 0xFA	; 250
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	c6 01       	movw	r24, r12
     58e:	0e 94 b9 08 	call	0x1172	; 0x1172 <strcat>
     592:	ff ef       	ldi	r31, 0xFF	; 255
     594:	23 ed       	ldi	r18, 0xD3	; 211
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	f1 50       	subi	r31, 0x01	; 1
     59a:	20 40       	sbci	r18, 0x00	; 0
     59c:	80 40       	sbci	r24, 0x00	; 0
     59e:	e1 f7       	brne	.-8      	; 0x598 <main+0xe6>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <main+0xf0>
     5a2:	00 00       	nop
				_delay_ms(1000);
				uart_puts(msg.data);
     5a4:	c6 01       	movw	r24, r12
     5a6:	0e 94 22 01 	call	0x244	; 0x244 <uart_puts>
				uart_puts("  \r\n");
     5aa:	80 e2       	ldi	r24, 0x20	; 32
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 22 01 	call	0x244	; 0x244 <uart_puts>
     5b2:	05 c0       	rjmp	.+10     	; 0x5be <main+0x10c>
			}
			else memcpy(msg.data, "OFF", 4);
     5b4:	f6 01       	movw	r30, r12
     5b6:	91 82       	std	Z+1, r9	; 0x01
     5b8:	80 82       	st	Z, r8
     5ba:	b3 82       	std	Z+3, r11	; 0x03
     5bc:	a2 82       	std	Z+2, r10	; 0x02
			msg.length = strlen((char *)msg.data) + 1;
     5be:	f6 01       	movw	r30, r12
     5c0:	01 90       	ld	r0, Z+
     5c2:	00 20       	and	r0, r0
     5c4:	e9 f7       	brne	.-6      	; 0x5c0 <main+0x10e>
     5c6:	ec 19       	sub	r30, r12
     5c8:	ee a7       	std	Y+46, r30	; 0x2e
			nRF24L01_transmit(rf, to_address, &msg);
     5ca:	ae 01       	movw	r20, r28
     5cc:	44 5f       	subi	r20, 0xF4	; 244
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	be 01       	movw	r22, r28
     5d2:	6f 5f       	subi	r22, 0xFF	; 255
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	c7 01       	movw	r24, r14
     5d8:	0e 94 83 04 	call	0x906	; 0x906 <nRF24L01_transmit>
     5dc:	ad cf       	rjmp	.-166    	; 0x538 <main+0x86>

000005de <__vector_11>:
		data++;
	}
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	8f 93       	push	r24
	send_message = true;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}
     5f0:	8f 91       	pop	r24
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

000005fc <__vector_1>:
// nRF24L01 interrupt
ISR(INT0_vect) {
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	8f 93       	push	r24
	rf_interrupt = true;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <rf_interrupt>
}
     60e:	8f 91       	pop	r24
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     61a:	fc 01       	movw	r30, r24
     61c:	a6 2f       	mov	r26, r22
     61e:	b7 2f       	mov	r27, r23
     620:	9c 01       	movw	r18, r24
     622:	2b 5f       	subi	r18, 0xFB	; 251
     624:	3f 4f       	sbci	r19, 0xFF	; 255
     626:	91 91       	ld	r25, Z+
     628:	9d 93       	st	X+, r25
     62a:	e2 17       	cp	r30, r18
     62c:	f3 07       	cpc	r31, r19
     62e:	d9 f7       	brne	.-10     	; 0x626 <copy_address+0xc>
     630:	08 95       	ret

00000632 <nRF24L01_init>:
     632:	80 e1       	ldi	r24, 0x10	; 16
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 98 07 	call	0xf30	; 0xf30 <malloc>
     63a:	20 e1       	ldi	r18, 0x10	; 16
     63c:	fc 01       	movw	r30, r24
     63e:	11 92       	st	Z+, r1
     640:	2a 95       	dec	r18
     642:	e9 f7       	brne	.-6      	; 0x63e <nRF24L01_init+0xc>
     644:	08 95       	ret

00000646 <nRF24L01_send_command>:
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
     64c:	da 01       	movw	r26, r20
     64e:	e8 81       	ld	r30, Y
     650:	f9 81       	ldd	r31, Y+1	; 0x01
     652:	50 81       	ld	r21, Z
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0a 80       	ldd	r0, Y+2	; 0x02
     65a:	02 c0       	rjmp	.+4      	; 0x660 <nRF24L01_send_command+0x1a>
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	0a 94       	dec	r0
     662:	e2 f7       	brpl	.-8      	; 0x65c <nRF24L01_send_command+0x16>
     664:	80 95       	com	r24
     666:	85 23       	and	r24, r21
     668:	80 83       	st	Z, r24
     66a:	6e bd       	out	0x2e, r22	; 46
     66c:	0d b4       	in	r0, 0x2d	; 45
     66e:	07 fe       	sbrs	r0, 7
     670:	fd cf       	rjmp	.-6      	; 0x66c <nRF24L01_send_command+0x26>
     672:	8e b5       	in	r24, 0x2e	; 46
     674:	8f 87       	std	Y+15, r24	; 0x0f
     676:	21 15       	cp	r18, r1
     678:	31 05       	cpc	r19, r1
     67a:	79 f0       	breq	.+30     	; 0x69a <nRF24L01_send_command+0x54>
     67c:	fd 01       	movw	r30, r26
     67e:	2a 0f       	add	r18, r26
     680:	3b 1f       	adc	r19, r27
     682:	df 01       	movw	r26, r30
     684:	90 81       	ld	r25, Z
     686:	9e bd       	out	0x2e, r25	; 46
     688:	0d b4       	in	r0, 0x2d	; 45
     68a:	07 fe       	sbrs	r0, 7
     68c:	fd cf       	rjmp	.-6      	; 0x688 <nRF24L01_send_command+0x42>
     68e:	9e b5       	in	r25, 0x2e	; 46
     690:	9c 93       	st	X, r25
     692:	31 96       	adiw	r30, 0x01	; 1
     694:	e2 17       	cp	r30, r18
     696:	f3 07       	cpc	r31, r19
     698:	a1 f7       	brne	.-24     	; 0x682 <nRF24L01_send_command+0x3c>
     69a:	e8 81       	ld	r30, Y
     69c:	f9 81       	ldd	r31, Y+1	; 0x01
     69e:	20 81       	ld	r18, Z
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0a 80       	ldd	r0, Y+2	; 0x02
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <nRF24L01_send_command+0x66>
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	0a 94       	dec	r0
     6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <nRF24L01_send_command+0x62>
     6b0:	82 2b       	or	r24, r18
     6b2:	80 83       	st	Z, r24
     6b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <nRF24L01_write_register>:
     6bc:	60 62       	ori	r22, 0x20	; 32
     6be:	0e 94 23 03 	call	0x646	; 0x646 <nRF24L01_send_command>
     6c2:	08 95       	ret

000006c4 <nRF24L01_read_register>:
     6c4:	0e 94 23 03 	call	0x646	; 0x646 <nRF24L01_send_command>
     6c8:	08 95       	ret

000006ca <nRF24L01_no_op>:
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	6f ef       	ldi	r22, 0xFF	; 255
     6d4:	0e 94 23 03 	call	0x646	; 0x646 <nRF24L01_send_command>
     6d8:	08 95       	ret

000006da <nRF24L01_update_status>:
     6da:	0e 94 65 03 	call	0x6ca	; 0x6ca <nRF24L01_no_op>
     6de:	08 95       	ret

000006e0 <nRF24L01_flush_transmit_message>:
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	61 ee       	ldi	r22, 0xE1	; 225
     6ea:	0e 94 23 03 	call	0x646	; 0x646 <nRF24L01_send_command>
     6ee:	08 95       	ret

000006f0 <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	1f 92       	push	r1
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     6fa:	20 e7       	ldi	r18, 0x70	; 112
     6fc:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	ae 01       	movw	r20, r28
     704:	4f 5f       	subi	r20, 0xFF	; 255
     706:	5f 4f       	sbci	r21, 0xFF	; 255
     708:	67 e0       	ldi	r22, 0x07	; 7
     70a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>
}
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	1f 92       	push	r1
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     728:	dc 01       	movw	r26, r24
     72a:	ed 91       	ld	r30, X+
     72c:	fc 91       	ld	r31, X
     72e:	11 97       	sbiw	r26, 0x01	; 1
     730:	42 91       	ld	r20, -Z
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9c 01       	movw	r18, r24
     738:	12 96       	adiw	r26, 0x02	; 2
     73a:	0c 90       	ld	r0, X
     73c:	12 97       	sbiw	r26, 0x02	; 2
     73e:	02 c0       	rjmp	.+4      	; 0x744 <nRF24L01_begin+0x2e>
     740:	22 0f       	add	r18, r18
     742:	33 1f       	adc	r19, r19
     744:	0a 94       	dec	r0
     746:	e2 f7       	brpl	.-8      	; 0x740 <nRF24L01_begin+0x2a>
     748:	24 2b       	or	r18, r20
     74a:	20 83       	st	Z, r18
     74c:	13 96       	adiw	r26, 0x03	; 3
     74e:	ed 91       	ld	r30, X+
     750:	fc 91       	ld	r31, X
     752:	14 97       	sbiw	r26, 0x04	; 4
     754:	42 91       	ld	r20, -Z
     756:	9c 01       	movw	r18, r24
     758:	15 96       	adiw	r26, 0x05	; 5
     75a:	0c 90       	ld	r0, X
     75c:	15 97       	sbiw	r26, 0x05	; 5
     75e:	02 c0       	rjmp	.+4      	; 0x764 <nRF24L01_begin+0x4e>
     760:	22 0f       	add	r18, r18
     762:	33 1f       	adc	r19, r19
     764:	0a 94       	dec	r0
     766:	e2 f7       	brpl	.-8      	; 0x760 <nRF24L01_begin+0x4a>
     768:	24 2b       	or	r18, r20
     76a:	20 83       	st	Z, r18
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
     772:	40 81       	ld	r20, Z
     774:	9c 01       	movw	r18, r24
     776:	12 96       	adiw	r26, 0x02	; 2
     778:	0c 90       	ld	r0, X
     77a:	12 97       	sbiw	r26, 0x02	; 2
     77c:	02 c0       	rjmp	.+4      	; 0x782 <nRF24L01_begin+0x6c>
     77e:	22 0f       	add	r18, r18
     780:	33 1f       	adc	r19, r19
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <nRF24L01_begin+0x68>
     786:	24 2b       	or	r18, r20
     788:	20 83       	st	Z, r18
     78a:	13 96       	adiw	r26, 0x03	; 3
     78c:	ed 91       	ld	r30, X+
     78e:	fc 91       	ld	r31, X
     790:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
     792:	30 81       	ld	r19, Z
     794:	ac 01       	movw	r20, r24
     796:	15 96       	adiw	r26, 0x05	; 5
     798:	0c 90       	ld	r0, X
     79a:	15 97       	sbiw	r26, 0x05	; 5
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <nRF24L01_begin+0x8c>
     79e:	44 0f       	add	r20, r20
     7a0:	55 1f       	adc	r21, r21
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <nRF24L01_begin+0x88>
     7a6:	24 2f       	mov	r18, r20
     7a8:	20 95       	com	r18
     7aa:	23 23       	and	r18, r19
     7ac:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
     7ae:	2c b5       	in	r18, 0x2c	; 44
     7b0:	20 61       	ori	r18, 0x10	; 16
     7b2:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
     7b4:	2c b5       	in	r18, 0x2c	; 44
     7b6:	20 64       	ori	r18, 0x40	; 64
     7b8:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     7ba:	16 96       	adiw	r26, 0x06	; 6
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	17 97       	sbiw	r26, 0x07	; 7
     7c2:	42 91       	ld	r20, -Z
     7c4:	9c 01       	movw	r18, r24
     7c6:	18 96       	adiw	r26, 0x08	; 8
     7c8:	0c 90       	ld	r0, X
     7ca:	18 97       	sbiw	r26, 0x08	; 8
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <nRF24L01_begin+0xbc>
     7ce:	22 0f       	add	r18, r18
     7d0:	33 1f       	adc	r19, r19
     7d2:	0a 94       	dec	r0
     7d4:	e2 f7       	brpl	.-8      	; 0x7ce <nRF24L01_begin+0xb8>
     7d6:	24 2b       	or	r18, r20
     7d8:	20 83       	st	Z, r18
     7da:	19 96       	adiw	r26, 0x09	; 9
     7dc:	ed 91       	ld	r30, X+
     7de:	fc 91       	ld	r31, X
     7e0:	1a 97       	sbiw	r26, 0x0a	; 10
     7e2:	42 91       	ld	r20, -Z
     7e4:	9c 01       	movw	r18, r24
     7e6:	1b 96       	adiw	r26, 0x0b	; 11
     7e8:	0c 90       	ld	r0, X
     7ea:	1b 97       	sbiw	r26, 0x0b	; 11
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <nRF24L01_begin+0xdc>
     7ee:	22 0f       	add	r18, r18
     7f0:	33 1f       	adc	r19, r19
     7f2:	0a 94       	dec	r0
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <nRF24L01_begin+0xd8>
     7f6:	24 2b       	or	r18, r20
     7f8:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
     7fa:	1c 96       	adiw	r26, 0x0c	; 12
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	1d 97       	sbiw	r26, 0x0d	; 13
     802:	22 91       	ld	r18, -Z
     804:	1e 96       	adiw	r26, 0x0e	; 14
     806:	0c 90       	ld	r0, X
     808:	02 c0       	rjmp	.+4      	; 0x80e <nRF24L01_begin+0xf8>
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	0a 94       	dec	r0
     810:	e2 f7       	brpl	.-8      	; 0x80a <nRF24L01_begin+0xf4>
     812:	80 95       	com	r24
     814:	82 23       	and	r24, r18
     816:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
     818:	8c b5       	in	r24, 0x2c	; 44
     81a:	87 7f       	andi	r24, 0xF7	; 247
     81c:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
     81e:	8c b5       	in	r24, 0x2c	; 44
     820:	8b 7f       	andi	r24, 0xFB	; 251
     822:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
     824:	8c b5       	in	r24, 0x2c	; 44
     826:	8e 7f       	andi	r24, 0xFE	; 254
     828:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
     82a:	8c b5       	in	r24, 0x2c	; 44
     82c:	8d 7f       	andi	r24, 0xFD	; 253
     82e:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
     830:	8d b5       	in	r24, 0x2d	; 45
     832:	81 60       	ori	r24, 0x01	; 1
     834:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
     836:	8c b5       	in	r24, 0x2c	; 44
     838:	8f 7d       	andi	r24, 0xDF	; 223
     83a:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	62 ee       	ldi	r22, 0xE2	; 226
     846:	c8 01       	movw	r24, r16
     848:	0e 94 23 03 	call	0x646	; 0x646 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	61 ee       	ldi	r22, 0xE1	; 225
     856:	c8 01       	movw	r24, r16
     858:	0e 94 23 03 	call	0x646	; 0x646 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     862:	8f e0       	ldi	r24, 0x0F	; 15
     864:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	c8 01       	movw	r24, r16
     874:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
     878:	0f 2e       	mov	r0, r31
     87a:	ff e3       	ldi	r31, 0x3F	; 63
     87c:	ff 2e       	mov	r15, r31
     87e:	f0 2d       	mov	r31, r0
     880:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	ae 01       	movw	r20, r28
     888:	4f 5f       	subi	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	c8 01       	movw	r24, r16
     890:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
     894:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	ae 01       	movw	r20, r28
     89c:	4f 5f       	subi	r20, 0xFF	; 255
     89e:	5f 4f       	sbci	r21, 0xFF	; 255
     8a0:	6c e1       	ldi	r22, 0x1C	; 28
     8a2:	c8 01       	movw	r24, r16
     8a4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
     8a8:	84 e0       	ldi	r24, 0x04	; 4
     8aa:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	ae 01       	movw	r20, r28
     8b2:	4f 5f       	subi	r20, 0xFF	; 255
     8b4:	5f 4f       	sbci	r21, 0xFF	; 255
     8b6:	6d e1       	ldi	r22, 0x1D	; 29
     8b8:	c8 01       	movw	r24, r16
     8ba:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
     8be:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	ae 01       	movw	r20, r28
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	62 e0       	ldi	r22, 0x02	; 2
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>
}
     8d2:	0f 90       	pop	r0
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	08 95       	ret

000008e0 <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	1f 92       	push	r1
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
     8ea:	20 e3       	ldi	r18, 0x30	; 48
     8ec:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	ae 01       	movw	r20, r28
     8f4:	4f 5f       	subi	r20, 0xFF	; 255
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	67 e0       	ldi	r22, 0x07	; 7
     8fa:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>
}
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	00 d0       	rcall	.+0      	; 0x918 <nRF24L01_transmit+0x12>
     918:	00 d0       	rcall	.+0      	; 0x91a <nRF24L01_transmit+0x14>
     91a:	00 d0       	rcall	.+0      	; 0x91c <nRF24L01_transmit+0x16>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	8c 01       	movw	r16, r24
     922:	6b 01       	movw	r12, r22
     924:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
     926:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
     92a:	be 01       	movw	r22, r28
     92c:	6f 5f       	subi	r22, 0xFF	; 255
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	c6 01       	movw	r24, r12
     932:	0e 94 0d 03 	call	0x61a	; 0x61a <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
     936:	25 e0       	ldi	r18, 0x05	; 5
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	ae 01       	movw	r20, r28
     93c:	4f 5f       	subi	r20, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	60 e1       	ldi	r22, 0x10	; 16
     942:	c8 01       	movw	r24, r16
     944:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
     948:	be 01       	movw	r22, r28
     94a:	6f 5f       	subi	r22, 0xFF	; 255
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	c6 01       	movw	r24, r12
     950:	0e 94 0d 03 	call	0x61a	; 0x61a <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
     954:	25 e0       	ldi	r18, 0x05	; 5
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	ae 01       	movw	r20, r28
     95a:	4f 5f       	subi	r20, 0xFF	; 255
     95c:	5f 4f       	sbci	r21, 0xFF	; 255
     95e:	6a e0       	ldi	r22, 0x0A	; 10
     960:	c8 01       	movw	r24, r16
     962:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
     966:	d7 01       	movw	r26, r14
     968:	92 96       	adiw	r26, 0x22	; 34
     96a:	2c 91       	ld	r18, X
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	a7 01       	movw	r20, r14
     970:	4e 5f       	subi	r20, 0xFE	; 254
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	60 ea       	ldi	r22, 0xA0	; 160
     976:	c8 01       	movw	r24, r16
     978:	0e 94 23 03 	call	0x646	; 0x646 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	ae 01       	movw	r20, r28
     982:	4a 5f       	subi	r20, 0xFA	; 250
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	c8 01       	movw	r24, r16
     98a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <nRF24L01_read_register>
    config &= ~_BV(PRIM_RX);
     98e:	8e 81       	ldd	r24, Y+6	; 0x06
     990:	8e 7f       	andi	r24, 0xFE	; 254
     992:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	ae 01       	movw	r20, r28
     99a:	4a 5f       	subi	r20, 0xFA	; 250
     99c:	5f 4f       	sbci	r21, 0xFF	; 255
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>
     9a6:	d8 01       	movw	r26, r16
     9a8:	13 96       	adiw	r26, 0x03	; 3
     9aa:	ed 91       	ld	r30, X+
     9ac:	fc 91       	ld	r31, X
     9ae:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
     9b0:	20 81       	ld	r18, Z
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	15 96       	adiw	r26, 0x05	; 5
     9b8:	0c 90       	ld	r0, X
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <nRF24L01_transmit+0xba>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <nRF24L01_transmit+0xb6>
     9c4:	82 2b       	or	r24, r18
     9c6:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     9c8:	26 96       	adiw	r28, 0x06	; 6
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	08 95       	ret

000009e6 <nRF24L01_transmit_success>:

int nRF24L01_transmit_success(nRF24L01 *rf) {
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	1f 92       	push	r1
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	8c 01       	movw	r16, r24
     9fa:	dc 01       	movw	r26, r24
     9fc:	13 96       	adiw	r26, 0x03	; 3
     9fe:	ed 91       	ld	r30, X+
     a00:	fc 91       	ld	r31, X
     a02:	14 97       	sbiw	r26, 0x04	; 4
inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
     a04:	20 81       	ld	r18, Z
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	15 96       	adiw	r26, 0x05	; 5
     a0c:	0c 90       	ld	r0, X
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <nRF24L01_transmit_success+0x2e>
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	0a 94       	dec	r0
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <nRF24L01_transmit_success+0x2a>
     a18:	80 95       	com	r24
     a1a:	82 23       	and	r24, r18
     a1c:	80 83       	st	Z, r24
    set_high(rf->ce);
}

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
     a1e:	c8 01       	movw	r24, r16
     a20:	0e 94 6d 03 	call	0x6da	; 0x6da <nRF24L01_update_status>
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
     a24:	f8 01       	movw	r30, r16
     a26:	87 85       	ldd	r24, Z+15	; 0x0f
     a28:	85 fd       	sbrc	r24, 5
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <nRF24L01_transmit_success+0x58>
    else if (rf->status & _BV(MAX_RT)) success = -1;
     a2c:	84 fd       	sbrc	r24, 4
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <nRF24L01_transmit_success+0x5e>
    else success = -2;
     a30:	0f 2e       	mov	r0, r31
     a32:	fe ef       	ldi	r31, 0xFE	; 254
     a34:	ef 2e       	mov	r14, r31
     a36:	ff 24       	eor	r15, r15
     a38:	fa 94       	dec	r15
     a3a:	f0 2d       	mov	r31, r0
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <nRF24L01_transmit_success+0x64>

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
     a3e:	e1 2c       	mov	r14, r1
     a40:	f1 2c       	mov	r15, r1
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <nRF24L01_transmit_success+0x64>
    else if (rf->status & _BV(MAX_RT)) success = -1;
     a44:	ee 24       	eor	r14, r14
     a46:	ea 94       	dec	r14
     a48:	fe 2c       	mov	r15, r14
    else success = -2;
    nRF24L01_clear_transmit_interrupts(rf);
     a4a:	c8 01       	movw	r24, r16
     a4c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nRF24L01_clear_transmit_interrupts>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
     a50:	21 e0       	ldi	r18, 0x01	; 1
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	ae 01       	movw	r20, r28
     a56:	4f 5f       	subi	r20, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	c8 01       	movw	r24, r16
     a5e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <nRF24L01_read_register>
    config |= _BV(PRIM_RX);
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &config, 1);
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	ae 01       	movw	r20, r28
     a6e:	4f 5f       	subi	r20, 0xFF	; 255
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	c8 01       	movw	r24, r16
     a76:	0e 94 5e 03 	call	0x6bc	; 0x6bc <nRF24L01_write_register>
    return success;
}
     a7a:	c7 01       	movw	r24, r14
     a7c:	0f 90       	pop	r0
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	08 95       	ret

00000a8c <__subsf3>:
     a8c:	50 58       	subi	r21, 0x80	; 128

00000a8e <__addsf3>:
     a8e:	bb 27       	eor	r27, r27
     a90:	aa 27       	eor	r26, r26
     a92:	0e 94 5e 05 	call	0xabc	; 0xabc <__addsf3x>
     a96:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_round>
     a9a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscA>
     a9e:	38 f0       	brcs	.+14     	; 0xaae <__addsf3+0x20>
     aa0:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscB>
     aa4:	20 f0       	brcs	.+8      	; 0xaae <__addsf3+0x20>
     aa6:	39 f4       	brne	.+14     	; 0xab6 <__addsf3+0x28>
     aa8:	9f 3f       	cpi	r25, 0xFF	; 255
     aaa:	19 f4       	brne	.+6      	; 0xab2 <__addsf3+0x24>
     aac:	26 f4       	brtc	.+8      	; 0xab6 <__addsf3+0x28>
     aae:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_nan>
     ab2:	0e f4       	brtc	.+2      	; 0xab6 <__addsf3+0x28>
     ab4:	e0 95       	com	r30
     ab6:	e7 fb       	bst	r30, 7
     ab8:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>

00000abc <__addsf3x>:
     abc:	e9 2f       	mov	r30, r25
     abe:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_split3>
     ac2:	58 f3       	brcs	.-42     	; 0xa9a <__addsf3+0xc>
     ac4:	ba 17       	cp	r27, r26
     ac6:	62 07       	cpc	r22, r18
     ac8:	73 07       	cpc	r23, r19
     aca:	84 07       	cpc	r24, r20
     acc:	95 07       	cpc	r25, r21
     ace:	20 f0       	brcs	.+8      	; 0xad8 <__addsf3x+0x1c>
     ad0:	79 f4       	brne	.+30     	; 0xaf0 <__addsf3x+0x34>
     ad2:	a6 f5       	brtc	.+104    	; 0xb3c <__addsf3x+0x80>
     ad4:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_zero>
     ad8:	0e f4       	brtc	.+2      	; 0xadc <__addsf3x+0x20>
     ada:	e0 95       	com	r30
     adc:	0b 2e       	mov	r0, r27
     ade:	ba 2f       	mov	r27, r26
     ae0:	a0 2d       	mov	r26, r0
     ae2:	0b 01       	movw	r0, r22
     ae4:	b9 01       	movw	r22, r18
     ae6:	90 01       	movw	r18, r0
     ae8:	0c 01       	movw	r0, r24
     aea:	ca 01       	movw	r24, r20
     aec:	a0 01       	movw	r20, r0
     aee:	11 24       	eor	r1, r1
     af0:	ff 27       	eor	r31, r31
     af2:	59 1b       	sub	r21, r25
     af4:	99 f0       	breq	.+38     	; 0xb1c <__addsf3x+0x60>
     af6:	59 3f       	cpi	r21, 0xF9	; 249
     af8:	50 f4       	brcc	.+20     	; 0xb0e <__addsf3x+0x52>
     afa:	50 3e       	cpi	r21, 0xE0	; 224
     afc:	68 f1       	brcs	.+90     	; 0xb58 <__addsf3x+0x9c>
     afe:	1a 16       	cp	r1, r26
     b00:	f0 40       	sbci	r31, 0x00	; 0
     b02:	a2 2f       	mov	r26, r18
     b04:	23 2f       	mov	r18, r19
     b06:	34 2f       	mov	r19, r20
     b08:	44 27       	eor	r20, r20
     b0a:	58 5f       	subi	r21, 0xF8	; 248
     b0c:	f3 cf       	rjmp	.-26     	; 0xaf4 <__addsf3x+0x38>
     b0e:	46 95       	lsr	r20
     b10:	37 95       	ror	r19
     b12:	27 95       	ror	r18
     b14:	a7 95       	ror	r26
     b16:	f0 40       	sbci	r31, 0x00	; 0
     b18:	53 95       	inc	r21
     b1a:	c9 f7       	brne	.-14     	; 0xb0e <__addsf3x+0x52>
     b1c:	7e f4       	brtc	.+30     	; 0xb3c <__addsf3x+0x80>
     b1e:	1f 16       	cp	r1, r31
     b20:	ba 0b       	sbc	r27, r26
     b22:	62 0b       	sbc	r22, r18
     b24:	73 0b       	sbc	r23, r19
     b26:	84 0b       	sbc	r24, r20
     b28:	ba f0       	brmi	.+46     	; 0xb58 <__addsf3x+0x9c>
     b2a:	91 50       	subi	r25, 0x01	; 1
     b2c:	a1 f0       	breq	.+40     	; 0xb56 <__addsf3x+0x9a>
     b2e:	ff 0f       	add	r31, r31
     b30:	bb 1f       	adc	r27, r27
     b32:	66 1f       	adc	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	c2 f7       	brpl	.-16     	; 0xb2a <__addsf3x+0x6e>
     b3a:	0e c0       	rjmp	.+28     	; 0xb58 <__addsf3x+0x9c>
     b3c:	ba 0f       	add	r27, r26
     b3e:	62 1f       	adc	r22, r18
     b40:	73 1f       	adc	r23, r19
     b42:	84 1f       	adc	r24, r20
     b44:	48 f4       	brcc	.+18     	; 0xb58 <__addsf3x+0x9c>
     b46:	87 95       	ror	r24
     b48:	77 95       	ror	r23
     b4a:	67 95       	ror	r22
     b4c:	b7 95       	ror	r27
     b4e:	f7 95       	ror	r31
     b50:	9e 3f       	cpi	r25, 0xFE	; 254
     b52:	08 f0       	brcs	.+2      	; 0xb56 <__addsf3x+0x9a>
     b54:	b0 cf       	rjmp	.-160    	; 0xab6 <__addsf3+0x28>
     b56:	93 95       	inc	r25
     b58:	88 0f       	add	r24, r24
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <__addsf3x+0xa2>
     b5c:	99 27       	eor	r25, r25
     b5e:	ee 0f       	add	r30, r30
     b60:	97 95       	ror	r25
     b62:	87 95       	ror	r24
     b64:	08 95       	ret

00000b66 <__divsf3>:
     b66:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__divsf3x>
     b6a:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_round>
     b6e:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscB>
     b72:	58 f0       	brcs	.+22     	; 0xb8a <__divsf3+0x24>
     b74:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscA>
     b78:	40 f0       	brcs	.+16     	; 0xb8a <__divsf3+0x24>
     b7a:	29 f4       	brne	.+10     	; 0xb86 <__divsf3+0x20>
     b7c:	5f 3f       	cpi	r21, 0xFF	; 255
     b7e:	29 f0       	breq	.+10     	; 0xb8a <__divsf3+0x24>
     b80:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
     b84:	51 11       	cpse	r21, r1
     b86:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>
     b8a:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_nan>

00000b8e <__divsf3x>:
     b8e:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_split3>
     b92:	68 f3       	brcs	.-38     	; 0xb6e <__divsf3+0x8>

00000b94 <__divsf3_pse>:
     b94:	99 23       	and	r25, r25
     b96:	b1 f3       	breq	.-20     	; 0xb84 <__divsf3+0x1e>
     b98:	55 23       	and	r21, r21
     b9a:	91 f3       	breq	.-28     	; 0xb80 <__divsf3+0x1a>
     b9c:	95 1b       	sub	r25, r21
     b9e:	55 0b       	sbc	r21, r21
     ba0:	bb 27       	eor	r27, r27
     ba2:	aa 27       	eor	r26, r26
     ba4:	62 17       	cp	r22, r18
     ba6:	73 07       	cpc	r23, r19
     ba8:	84 07       	cpc	r24, r20
     baa:	38 f0       	brcs	.+14     	; 0xbba <__divsf3_pse+0x26>
     bac:	9f 5f       	subi	r25, 0xFF	; 255
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	44 1f       	adc	r20, r20
     bb6:	aa 1f       	adc	r26, r26
     bb8:	a9 f3       	breq	.-22     	; 0xba4 <__divsf3_pse+0x10>
     bba:	35 d0       	rcall	.+106    	; 0xc26 <__divsf3_pse+0x92>
     bbc:	0e 2e       	mov	r0, r30
     bbe:	3a f0       	brmi	.+14     	; 0xbce <__divsf3_pse+0x3a>
     bc0:	e0 e8       	ldi	r30, 0x80	; 128
     bc2:	32 d0       	rcall	.+100    	; 0xc28 <__divsf3_pse+0x94>
     bc4:	91 50       	subi	r25, 0x01	; 1
     bc6:	50 40       	sbci	r21, 0x00	; 0
     bc8:	e6 95       	lsr	r30
     bca:	00 1c       	adc	r0, r0
     bcc:	ca f7       	brpl	.-14     	; 0xbc0 <__divsf3_pse+0x2c>
     bce:	2b d0       	rcall	.+86     	; 0xc26 <__divsf3_pse+0x92>
     bd0:	fe 2f       	mov	r31, r30
     bd2:	29 d0       	rcall	.+82     	; 0xc26 <__divsf3_pse+0x92>
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	bb 1f       	adc	r27, r27
     bdc:	26 17       	cp	r18, r22
     bde:	37 07       	cpc	r19, r23
     be0:	48 07       	cpc	r20, r24
     be2:	ab 07       	cpc	r26, r27
     be4:	b0 e8       	ldi	r27, 0x80	; 128
     be6:	09 f0       	breq	.+2      	; 0xbea <__divsf3_pse+0x56>
     be8:	bb 0b       	sbc	r27, r27
     bea:	80 2d       	mov	r24, r0
     bec:	bf 01       	movw	r22, r30
     bee:	ff 27       	eor	r31, r31
     bf0:	93 58       	subi	r25, 0x83	; 131
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
     bf4:	3a f0       	brmi	.+14     	; 0xc04 <__divsf3_pse+0x70>
     bf6:	9e 3f       	cpi	r25, 0xFE	; 254
     bf8:	51 05       	cpc	r21, r1
     bfa:	78 f0       	brcs	.+30     	; 0xc1a <__divsf3_pse+0x86>
     bfc:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
     c00:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>
     c04:	5f 3f       	cpi	r21, 0xFF	; 255
     c06:	e4 f3       	brlt	.-8      	; 0xc00 <__divsf3_pse+0x6c>
     c08:	98 3e       	cpi	r25, 0xE8	; 232
     c0a:	d4 f3       	brlt	.-12     	; 0xc00 <__divsf3_pse+0x6c>
     c0c:	86 95       	lsr	r24
     c0e:	77 95       	ror	r23
     c10:	67 95       	ror	r22
     c12:	b7 95       	ror	r27
     c14:	f7 95       	ror	r31
     c16:	9f 5f       	subi	r25, 0xFF	; 255
     c18:	c9 f7       	brne	.-14     	; 0xc0c <__divsf3_pse+0x78>
     c1a:	88 0f       	add	r24, r24
     c1c:	91 1d       	adc	r25, r1
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	97 f9       	bld	r25, 7
     c24:	08 95       	ret
     c26:	e1 e0       	ldi	r30, 0x01	; 1
     c28:	66 0f       	add	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	88 1f       	adc	r24, r24
     c2e:	bb 1f       	adc	r27, r27
     c30:	62 17       	cp	r22, r18
     c32:	73 07       	cpc	r23, r19
     c34:	84 07       	cpc	r24, r20
     c36:	ba 07       	cpc	r27, r26
     c38:	20 f0       	brcs	.+8      	; 0xc42 <__divsf3_pse+0xae>
     c3a:	62 1b       	sub	r22, r18
     c3c:	73 0b       	sbc	r23, r19
     c3e:	84 0b       	sbc	r24, r20
     c40:	ba 0b       	sbc	r27, r26
     c42:	ee 1f       	adc	r30, r30
     c44:	88 f7       	brcc	.-30     	; 0xc28 <__divsf3_pse+0x94>
     c46:	e0 95       	com	r30
     c48:	08 95       	ret

00000c4a <__fixunssfsi>:
     c4a:	0e 94 c1 06 	call	0xd82	; 0xd82 <__fp_splitA>
     c4e:	88 f0       	brcs	.+34     	; 0xc72 <__fixunssfsi+0x28>
     c50:	9f 57       	subi	r25, 0x7F	; 127
     c52:	98 f0       	brcs	.+38     	; 0xc7a <__fixunssfsi+0x30>
     c54:	b9 2f       	mov	r27, r25
     c56:	99 27       	eor	r25, r25
     c58:	b7 51       	subi	r27, 0x17	; 23
     c5a:	b0 f0       	brcs	.+44     	; 0xc88 <__fixunssfsi+0x3e>
     c5c:	e1 f0       	breq	.+56     	; 0xc96 <__fixunssfsi+0x4c>
     c5e:	66 0f       	add	r22, r22
     c60:	77 1f       	adc	r23, r23
     c62:	88 1f       	adc	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	1a f0       	brmi	.+6      	; 0xc6e <__fixunssfsi+0x24>
     c68:	ba 95       	dec	r27
     c6a:	c9 f7       	brne	.-14     	; 0xc5e <__fixunssfsi+0x14>
     c6c:	14 c0       	rjmp	.+40     	; 0xc96 <__fixunssfsi+0x4c>
     c6e:	b1 30       	cpi	r27, 0x01	; 1
     c70:	91 f0       	breq	.+36     	; 0xc96 <__fixunssfsi+0x4c>
     c72:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_zero>
     c76:	b1 e0       	ldi	r27, 0x01	; 1
     c78:	08 95       	ret
     c7a:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_zero>
     c7e:	67 2f       	mov	r22, r23
     c80:	78 2f       	mov	r23, r24
     c82:	88 27       	eor	r24, r24
     c84:	b8 5f       	subi	r27, 0xF8	; 248
     c86:	39 f0       	breq	.+14     	; 0xc96 <__fixunssfsi+0x4c>
     c88:	b9 3f       	cpi	r27, 0xF9	; 249
     c8a:	cc f3       	brlt	.-14     	; 0xc7e <__fixunssfsi+0x34>
     c8c:	86 95       	lsr	r24
     c8e:	77 95       	ror	r23
     c90:	67 95       	ror	r22
     c92:	b3 95       	inc	r27
     c94:	d9 f7       	brne	.-10     	; 0xc8c <__fixunssfsi+0x42>
     c96:	3e f4       	brtc	.+14     	; 0xca6 <__fixunssfsi+0x5c>
     c98:	90 95       	com	r25
     c9a:	80 95       	com	r24
     c9c:	70 95       	com	r23
     c9e:	61 95       	neg	r22
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	8f 4f       	sbci	r24, 0xFF	; 255
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	08 95       	ret

00000ca8 <__floatunsisf>:
     ca8:	e8 94       	clt
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <__floatsisf+0x12>

00000cac <__floatsisf>:
     cac:	97 fb       	bst	r25, 7
     cae:	3e f4       	brtc	.+14     	; 0xcbe <__floatsisf+0x12>
     cb0:	90 95       	com	r25
     cb2:	80 95       	com	r24
     cb4:	70 95       	com	r23
     cb6:	61 95       	neg	r22
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	8f 4f       	sbci	r24, 0xFF	; 255
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	99 23       	and	r25, r25
     cc0:	a9 f0       	breq	.+42     	; 0xcec <__floatsisf+0x40>
     cc2:	f9 2f       	mov	r31, r25
     cc4:	96 e9       	ldi	r25, 0x96	; 150
     cc6:	bb 27       	eor	r27, r27
     cc8:	93 95       	inc	r25
     cca:	f6 95       	lsr	r31
     ccc:	87 95       	ror	r24
     cce:	77 95       	ror	r23
     cd0:	67 95       	ror	r22
     cd2:	b7 95       	ror	r27
     cd4:	f1 11       	cpse	r31, r1
     cd6:	f8 cf       	rjmp	.-16     	; 0xcc8 <__floatsisf+0x1c>
     cd8:	fa f4       	brpl	.+62     	; 0xd18 <__floatsisf+0x6c>
     cda:	bb 0f       	add	r27, r27
     cdc:	11 f4       	brne	.+4      	; 0xce2 <__floatsisf+0x36>
     cde:	60 ff       	sbrs	r22, 0
     ce0:	1b c0       	rjmp	.+54     	; 0xd18 <__floatsisf+0x6c>
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	8f 4f       	sbci	r24, 0xFF	; 255
     ce8:	9f 4f       	sbci	r25, 0xFF	; 255
     cea:	16 c0       	rjmp	.+44     	; 0xd18 <__floatsisf+0x6c>
     cec:	88 23       	and	r24, r24
     cee:	11 f0       	breq	.+4      	; 0xcf4 <__floatsisf+0x48>
     cf0:	96 e9       	ldi	r25, 0x96	; 150
     cf2:	11 c0       	rjmp	.+34     	; 0xd16 <__floatsisf+0x6a>
     cf4:	77 23       	and	r23, r23
     cf6:	21 f0       	breq	.+8      	; 0xd00 <__floatsisf+0x54>
     cf8:	9e e8       	ldi	r25, 0x8E	; 142
     cfa:	87 2f       	mov	r24, r23
     cfc:	76 2f       	mov	r23, r22
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__floatsisf+0x5e>
     d00:	66 23       	and	r22, r22
     d02:	71 f0       	breq	.+28     	; 0xd20 <__floatsisf+0x74>
     d04:	96 e8       	ldi	r25, 0x86	; 134
     d06:	86 2f       	mov	r24, r22
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	2a f0       	brmi	.+10     	; 0xd18 <__floatsisf+0x6c>
     d0e:	9a 95       	dec	r25
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	da f7       	brpl	.-10     	; 0xd0e <__floatsisf+0x62>
     d18:	88 0f       	add	r24, r24
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	97 f9       	bld	r25, 7
     d20:	08 95       	ret

00000d22 <__fp_inf>:
     d22:	97 f9       	bld	r25, 7
     d24:	9f 67       	ori	r25, 0x7F	; 127
     d26:	80 e8       	ldi	r24, 0x80	; 128
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	08 95       	ret

00000d2e <__fp_nan>:
     d2e:	9f ef       	ldi	r25, 0xFF	; 255
     d30:	80 ec       	ldi	r24, 0xC0	; 192
     d32:	08 95       	ret

00000d34 <__fp_pscA>:
     d34:	00 24       	eor	r0, r0
     d36:	0a 94       	dec	r0
     d38:	16 16       	cp	r1, r22
     d3a:	17 06       	cpc	r1, r23
     d3c:	18 06       	cpc	r1, r24
     d3e:	09 06       	cpc	r0, r25
     d40:	08 95       	ret

00000d42 <__fp_pscB>:
     d42:	00 24       	eor	r0, r0
     d44:	0a 94       	dec	r0
     d46:	12 16       	cp	r1, r18
     d48:	13 06       	cpc	r1, r19
     d4a:	14 06       	cpc	r1, r20
     d4c:	05 06       	cpc	r0, r21
     d4e:	08 95       	ret

00000d50 <__fp_round>:
     d50:	09 2e       	mov	r0, r25
     d52:	03 94       	inc	r0
     d54:	00 0c       	add	r0, r0
     d56:	11 f4       	brne	.+4      	; 0xd5c <__fp_round+0xc>
     d58:	88 23       	and	r24, r24
     d5a:	52 f0       	brmi	.+20     	; 0xd70 <__fp_round+0x20>
     d5c:	bb 0f       	add	r27, r27
     d5e:	40 f4       	brcc	.+16     	; 0xd70 <__fp_round+0x20>
     d60:	bf 2b       	or	r27, r31
     d62:	11 f4       	brne	.+4      	; 0xd68 <__fp_round+0x18>
     d64:	60 ff       	sbrs	r22, 0
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <__fp_round+0x20>
     d68:	6f 5f       	subi	r22, 0xFF	; 255
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	08 95       	ret

00000d72 <__fp_split3>:
     d72:	57 fd       	sbrc	r21, 7
     d74:	90 58       	subi	r25, 0x80	; 128
     d76:	44 0f       	add	r20, r20
     d78:	55 1f       	adc	r21, r21
     d7a:	59 f0       	breq	.+22     	; 0xd92 <__fp_splitA+0x10>
     d7c:	5f 3f       	cpi	r21, 0xFF	; 255
     d7e:	71 f0       	breq	.+28     	; 0xd9c <__fp_splitA+0x1a>
     d80:	47 95       	ror	r20

00000d82 <__fp_splitA>:
     d82:	88 0f       	add	r24, r24
     d84:	97 fb       	bst	r25, 7
     d86:	99 1f       	adc	r25, r25
     d88:	61 f0       	breq	.+24     	; 0xda2 <__fp_splitA+0x20>
     d8a:	9f 3f       	cpi	r25, 0xFF	; 255
     d8c:	79 f0       	breq	.+30     	; 0xdac <__fp_splitA+0x2a>
     d8e:	87 95       	ror	r24
     d90:	08 95       	ret
     d92:	12 16       	cp	r1, r18
     d94:	13 06       	cpc	r1, r19
     d96:	14 06       	cpc	r1, r20
     d98:	55 1f       	adc	r21, r21
     d9a:	f2 cf       	rjmp	.-28     	; 0xd80 <__fp_split3+0xe>
     d9c:	46 95       	lsr	r20
     d9e:	f1 df       	rcall	.-30     	; 0xd82 <__fp_splitA>
     da0:	08 c0       	rjmp	.+16     	; 0xdb2 <__fp_splitA+0x30>
     da2:	16 16       	cp	r1, r22
     da4:	17 06       	cpc	r1, r23
     da6:	18 06       	cpc	r1, r24
     da8:	99 1f       	adc	r25, r25
     daa:	f1 cf       	rjmp	.-30     	; 0xd8e <__fp_splitA+0xc>
     dac:	86 95       	lsr	r24
     dae:	71 05       	cpc	r23, r1
     db0:	61 05       	cpc	r22, r1
     db2:	08 94       	sec
     db4:	08 95       	ret

00000db6 <__fp_zero>:
     db6:	e8 94       	clt

00000db8 <__fp_szero>:
     db8:	bb 27       	eor	r27, r27
     dba:	66 27       	eor	r22, r22
     dbc:	77 27       	eor	r23, r23
     dbe:	cb 01       	movw	r24, r22
     dc0:	97 f9       	bld	r25, 7
     dc2:	08 95       	ret

00000dc4 <__gesf2>:
     dc4:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_cmp>
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <__gesf2+0x8>
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	08 95       	ret

00000dce <__mulsf3>:
     dce:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3x>
     dd2:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_round>
     dd6:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscA>
     dda:	38 f0       	brcs	.+14     	; 0xdea <__mulsf3+0x1c>
     ddc:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscB>
     de0:	20 f0       	brcs	.+8      	; 0xdea <__mulsf3+0x1c>
     de2:	95 23       	and	r25, r21
     de4:	11 f0       	breq	.+4      	; 0xdea <__mulsf3+0x1c>
     de6:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
     dea:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_nan>
     dee:	11 24       	eor	r1, r1
     df0:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>

00000df4 <__mulsf3x>:
     df4:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_split3>
     df8:	70 f3       	brcs	.-36     	; 0xdd6 <__mulsf3+0x8>

00000dfa <__mulsf3_pse>:
     dfa:	95 9f       	mul	r25, r21
     dfc:	c1 f3       	breq	.-16     	; 0xdee <__mulsf3+0x20>
     dfe:	95 0f       	add	r25, r21
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	55 1f       	adc	r21, r21
     e04:	62 9f       	mul	r22, r18
     e06:	f0 01       	movw	r30, r0
     e08:	72 9f       	mul	r23, r18
     e0a:	bb 27       	eor	r27, r27
     e0c:	f0 0d       	add	r31, r0
     e0e:	b1 1d       	adc	r27, r1
     e10:	63 9f       	mul	r22, r19
     e12:	aa 27       	eor	r26, r26
     e14:	f0 0d       	add	r31, r0
     e16:	b1 1d       	adc	r27, r1
     e18:	aa 1f       	adc	r26, r26
     e1a:	64 9f       	mul	r22, r20
     e1c:	66 27       	eor	r22, r22
     e1e:	b0 0d       	add	r27, r0
     e20:	a1 1d       	adc	r26, r1
     e22:	66 1f       	adc	r22, r22
     e24:	82 9f       	mul	r24, r18
     e26:	22 27       	eor	r18, r18
     e28:	b0 0d       	add	r27, r0
     e2a:	a1 1d       	adc	r26, r1
     e2c:	62 1f       	adc	r22, r18
     e2e:	73 9f       	mul	r23, r19
     e30:	b0 0d       	add	r27, r0
     e32:	a1 1d       	adc	r26, r1
     e34:	62 1f       	adc	r22, r18
     e36:	83 9f       	mul	r24, r19
     e38:	a0 0d       	add	r26, r0
     e3a:	61 1d       	adc	r22, r1
     e3c:	22 1f       	adc	r18, r18
     e3e:	74 9f       	mul	r23, r20
     e40:	33 27       	eor	r19, r19
     e42:	a0 0d       	add	r26, r0
     e44:	61 1d       	adc	r22, r1
     e46:	23 1f       	adc	r18, r19
     e48:	84 9f       	mul	r24, r20
     e4a:	60 0d       	add	r22, r0
     e4c:	21 1d       	adc	r18, r1
     e4e:	82 2f       	mov	r24, r18
     e50:	76 2f       	mov	r23, r22
     e52:	6a 2f       	mov	r22, r26
     e54:	11 24       	eor	r1, r1
     e56:	9f 57       	subi	r25, 0x7F	; 127
     e58:	50 40       	sbci	r21, 0x00	; 0
     e5a:	9a f0       	brmi	.+38     	; 0xe82 <__mulsf3_pse+0x88>
     e5c:	f1 f0       	breq	.+60     	; 0xe9a <__mulsf3_pse+0xa0>
     e5e:	88 23       	and	r24, r24
     e60:	4a f0       	brmi	.+18     	; 0xe74 <__mulsf3_pse+0x7a>
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	bb 1f       	adc	r27, r27
     e68:	66 1f       	adc	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	91 50       	subi	r25, 0x01	; 1
     e70:	50 40       	sbci	r21, 0x00	; 0
     e72:	a9 f7       	brne	.-22     	; 0xe5e <__mulsf3_pse+0x64>
     e74:	9e 3f       	cpi	r25, 0xFE	; 254
     e76:	51 05       	cpc	r21, r1
     e78:	80 f0       	brcs	.+32     	; 0xe9a <__mulsf3_pse+0xa0>
     e7a:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
     e7e:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>
     e82:	5f 3f       	cpi	r21, 0xFF	; 255
     e84:	e4 f3       	brlt	.-8      	; 0xe7e <__mulsf3_pse+0x84>
     e86:	98 3e       	cpi	r25, 0xE8	; 232
     e88:	d4 f3       	brlt	.-12     	; 0xe7e <__mulsf3_pse+0x84>
     e8a:	86 95       	lsr	r24
     e8c:	77 95       	ror	r23
     e8e:	67 95       	ror	r22
     e90:	b7 95       	ror	r27
     e92:	f7 95       	ror	r31
     e94:	e7 95       	ror	r30
     e96:	9f 5f       	subi	r25, 0xFF	; 255
     e98:	c1 f7       	brne	.-16     	; 0xe8a <__mulsf3_pse+0x90>
     e9a:	fe 2b       	or	r31, r30
     e9c:	88 0f       	add	r24, r24
     e9e:	91 1d       	adc	r25, r1
     ea0:	96 95       	lsr	r25
     ea2:	87 95       	ror	r24
     ea4:	97 f9       	bld	r25, 7
     ea6:	08 95       	ret

00000ea8 <__fp_cmp>:
     ea8:	99 0f       	add	r25, r25
     eaa:	00 08       	sbc	r0, r0
     eac:	55 0f       	add	r21, r21
     eae:	aa 0b       	sbc	r26, r26
     eb0:	e0 e8       	ldi	r30, 0x80	; 128
     eb2:	fe ef       	ldi	r31, 0xFE	; 254
     eb4:	16 16       	cp	r1, r22
     eb6:	17 06       	cpc	r1, r23
     eb8:	e8 07       	cpc	r30, r24
     eba:	f9 07       	cpc	r31, r25
     ebc:	c0 f0       	brcs	.+48     	; 0xeee <__fp_cmp+0x46>
     ebe:	12 16       	cp	r1, r18
     ec0:	13 06       	cpc	r1, r19
     ec2:	e4 07       	cpc	r30, r20
     ec4:	f5 07       	cpc	r31, r21
     ec6:	98 f0       	brcs	.+38     	; 0xeee <__fp_cmp+0x46>
     ec8:	62 1b       	sub	r22, r18
     eca:	73 0b       	sbc	r23, r19
     ecc:	84 0b       	sbc	r24, r20
     ece:	95 0b       	sbc	r25, r21
     ed0:	39 f4       	brne	.+14     	; 0xee0 <__fp_cmp+0x38>
     ed2:	0a 26       	eor	r0, r26
     ed4:	61 f0       	breq	.+24     	; 0xeee <__fp_cmp+0x46>
     ed6:	23 2b       	or	r18, r19
     ed8:	24 2b       	or	r18, r20
     eda:	25 2b       	or	r18, r21
     edc:	21 f4       	brne	.+8      	; 0xee6 <__fp_cmp+0x3e>
     ede:	08 95       	ret
     ee0:	0a 26       	eor	r0, r26
     ee2:	09 f4       	brne	.+2      	; 0xee6 <__fp_cmp+0x3e>
     ee4:	a1 40       	sbci	r26, 0x01	; 1
     ee6:	a6 95       	lsr	r26
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	81 1d       	adc	r24, r1
     eec:	81 1d       	adc	r24, r1
     eee:	08 95       	ret

00000ef0 <dtostrf>:
     ef0:	ef 92       	push	r14
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	e8 01       	movw	r28, r16
     efc:	47 fd       	sbrc	r20, 7
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <dtostrf+0x14>
     f00:	34 e0       	ldi	r19, 0x04	; 4
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <dtostrf+0x16>
     f04:	34 e1       	ldi	r19, 0x14	; 20
     f06:	04 2e       	mov	r0, r20
     f08:	00 0c       	add	r0, r0
     f0a:	55 0b       	sbc	r21, r21
     f0c:	57 ff       	sbrs	r21, 7
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <dtostrf+0x26>
     f10:	51 95       	neg	r21
     f12:	41 95       	neg	r20
     f14:	51 09       	sbc	r21, r1
     f16:	e3 2e       	mov	r14, r19
     f18:	02 2f       	mov	r16, r18
     f1a:	24 2f       	mov	r18, r20
     f1c:	ae 01       	movw	r20, r28
     f1e:	0e 94 c4 08 	call	0x1188	; 0x1188 <dtoa_prf>
     f22:	ce 01       	movw	r24, r28
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ef 90       	pop	r14
     f2e:	08 95       	ret

00000f30 <malloc>:
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	91 05       	cpc	r25, r1
     f3c:	10 f4       	brcc	.+4      	; 0xf42 <malloc+0x12>
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__flp>
     f46:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__flp+0x1>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	19 f1       	breq	.+70     	; 0xf9c <malloc+0x6c>
     f56:	40 81       	ld	r20, Z
     f58:	51 81       	ldd	r21, Z+1	; 0x01
     f5a:	02 81       	ldd	r16, Z+2	; 0x02
     f5c:	13 81       	ldd	r17, Z+3	; 0x03
     f5e:	48 17       	cp	r20, r24
     f60:	59 07       	cpc	r21, r25
     f62:	c8 f0       	brcs	.+50     	; 0xf96 <malloc+0x66>
     f64:	84 17       	cp	r24, r20
     f66:	95 07       	cpc	r25, r21
     f68:	69 f4       	brne	.+26     	; 0xf84 <malloc+0x54>
     f6a:	10 97       	sbiw	r26, 0x00	; 0
     f6c:	31 f0       	breq	.+12     	; 0xf7a <malloc+0x4a>
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	0c 93       	st	X, r16
     f72:	12 97       	sbiw	r26, 0x02	; 2
     f74:	13 96       	adiw	r26, 0x03	; 3
     f76:	1c 93       	st	X, r17
     f78:	27 c0       	rjmp	.+78     	; 0xfc8 <malloc+0x98>
     f7a:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <__flp>
     f7e:	10 93 2b 01 	sts	0x012B, r17	; 0x80012b <__flp+0x1>
     f82:	22 c0       	rjmp	.+68     	; 0xfc8 <malloc+0x98>
     f84:	21 15       	cp	r18, r1
     f86:	31 05       	cpc	r19, r1
     f88:	19 f0       	breq	.+6      	; 0xf90 <malloc+0x60>
     f8a:	42 17       	cp	r20, r18
     f8c:	53 07       	cpc	r21, r19
     f8e:	18 f4       	brcc	.+6      	; 0xf96 <malloc+0x66>
     f90:	9a 01       	movw	r18, r20
     f92:	bd 01       	movw	r22, r26
     f94:	ef 01       	movw	r28, r30
     f96:	df 01       	movw	r26, r30
     f98:	f8 01       	movw	r30, r16
     f9a:	db cf       	rjmp	.-74     	; 0xf52 <malloc+0x22>
     f9c:	21 15       	cp	r18, r1
     f9e:	31 05       	cpc	r19, r1
     fa0:	f9 f0       	breq	.+62     	; 0xfe0 <malloc+0xb0>
     fa2:	28 1b       	sub	r18, r24
     fa4:	39 0b       	sbc	r19, r25
     fa6:	24 30       	cpi	r18, 0x04	; 4
     fa8:	31 05       	cpc	r19, r1
     faa:	80 f4       	brcc	.+32     	; 0xfcc <malloc+0x9c>
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	61 15       	cp	r22, r1
     fb2:	71 05       	cpc	r23, r1
     fb4:	21 f0       	breq	.+8      	; 0xfbe <malloc+0x8e>
     fb6:	fb 01       	movw	r30, r22
     fb8:	93 83       	std	Z+3, r25	; 0x03
     fba:	82 83       	std	Z+2, r24	; 0x02
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <malloc+0x96>
     fbe:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__flp+0x1>
     fc2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__flp>
     fc6:	fe 01       	movw	r30, r28
     fc8:	32 96       	adiw	r30, 0x02	; 2
     fca:	44 c0       	rjmp	.+136    	; 0x1054 <malloc+0x124>
     fcc:	fe 01       	movw	r30, r28
     fce:	e2 0f       	add	r30, r18
     fd0:	f3 1f       	adc	r31, r19
     fd2:	81 93       	st	Z+, r24
     fd4:	91 93       	st	Z+, r25
     fd6:	22 50       	subi	r18, 0x02	; 2
     fd8:	31 09       	sbc	r19, r1
     fda:	39 83       	std	Y+1, r19	; 0x01
     fdc:	28 83       	st	Y, r18
     fde:	3a c0       	rjmp	.+116    	; 0x1054 <malloc+0x124>
     fe0:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__brkval>
     fe4:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__brkval+0x1>
     fe8:	23 2b       	or	r18, r19
     fea:	41 f4       	brne	.+16     	; 0xffc <malloc+0xcc>
     fec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     ff0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     ff4:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__brkval+0x1>
     ff8:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__brkval>
     ffc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1000:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1004:	21 15       	cp	r18, r1
    1006:	31 05       	cpc	r19, r1
    1008:	41 f4       	brne	.+16     	; 0x101a <malloc+0xea>
    100a:	2d b7       	in	r18, 0x3d	; 61
    100c:	3e b7       	in	r19, 0x3e	; 62
    100e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1012:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1016:	24 1b       	sub	r18, r20
    1018:	35 0b       	sbc	r19, r21
    101a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <__brkval>
    101e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <__brkval+0x1>
    1022:	e2 17       	cp	r30, r18
    1024:	f3 07       	cpc	r31, r19
    1026:	a0 f4       	brcc	.+40     	; 0x1050 <malloc+0x120>
    1028:	2e 1b       	sub	r18, r30
    102a:	3f 0b       	sbc	r19, r31
    102c:	28 17       	cp	r18, r24
    102e:	39 07       	cpc	r19, r25
    1030:	78 f0       	brcs	.+30     	; 0x1050 <malloc+0x120>
    1032:	ac 01       	movw	r20, r24
    1034:	4e 5f       	subi	r20, 0xFE	; 254
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	24 17       	cp	r18, r20
    103a:	35 07       	cpc	r19, r21
    103c:	48 f0       	brcs	.+18     	; 0x1050 <malloc+0x120>
    103e:	4e 0f       	add	r20, r30
    1040:	5f 1f       	adc	r21, r31
    1042:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__brkval+0x1>
    1046:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__brkval>
    104a:	81 93       	st	Z+, r24
    104c:	91 93       	st	Z+, r25
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <malloc+0x124>
    1050:	e0 e0       	ldi	r30, 0x00	; 0
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	cf 01       	movw	r24, r30
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <free>:
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	09 f4       	brne	.+2      	; 0x106a <free+0xa>
    1068:	81 c0       	rjmp	.+258    	; 0x116c <free+0x10c>
    106a:	fc 01       	movw	r30, r24
    106c:	32 97       	sbiw	r30, 0x02	; 2
    106e:	13 82       	std	Z+3, r1	; 0x03
    1070:	12 82       	std	Z+2, r1	; 0x02
    1072:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__flp>
    1076:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__flp+0x1>
    107a:	10 97       	sbiw	r26, 0x00	; 0
    107c:	81 f4       	brne	.+32     	; 0x109e <free+0x3e>
    107e:	20 81       	ld	r18, Z
    1080:	31 81       	ldd	r19, Z+1	; 0x01
    1082:	82 0f       	add	r24, r18
    1084:	93 1f       	adc	r25, r19
    1086:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__brkval>
    108a:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__brkval+0x1>
    108e:	28 17       	cp	r18, r24
    1090:	39 07       	cpc	r19, r25
    1092:	51 f5       	brne	.+84     	; 0x10e8 <free+0x88>
    1094:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <__brkval+0x1>
    1098:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <__brkval>
    109c:	67 c0       	rjmp	.+206    	; 0x116c <free+0x10c>
    109e:	ed 01       	movw	r28, r26
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	ce 17       	cp	r28, r30
    10a6:	df 07       	cpc	r29, r31
    10a8:	40 f4       	brcc	.+16     	; 0x10ba <free+0x5a>
    10aa:	4a 81       	ldd	r20, Y+2	; 0x02
    10ac:	5b 81       	ldd	r21, Y+3	; 0x03
    10ae:	9e 01       	movw	r18, r28
    10b0:	41 15       	cp	r20, r1
    10b2:	51 05       	cpc	r21, r1
    10b4:	f1 f0       	breq	.+60     	; 0x10f2 <free+0x92>
    10b6:	ea 01       	movw	r28, r20
    10b8:	f5 cf       	rjmp	.-22     	; 0x10a4 <free+0x44>
    10ba:	d3 83       	std	Z+3, r29	; 0x03
    10bc:	c2 83       	std	Z+2, r28	; 0x02
    10be:	40 81       	ld	r20, Z
    10c0:	51 81       	ldd	r21, Z+1	; 0x01
    10c2:	84 0f       	add	r24, r20
    10c4:	95 1f       	adc	r25, r21
    10c6:	c8 17       	cp	r28, r24
    10c8:	d9 07       	cpc	r29, r25
    10ca:	59 f4       	brne	.+22     	; 0x10e2 <free+0x82>
    10cc:	88 81       	ld	r24, Y
    10ce:	99 81       	ldd	r25, Y+1	; 0x01
    10d0:	84 0f       	add	r24, r20
    10d2:	95 1f       	adc	r25, r21
    10d4:	02 96       	adiw	r24, 0x02	; 2
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	9b 81       	ldd	r25, Y+3	; 0x03
    10de:	93 83       	std	Z+3, r25	; 0x03
    10e0:	82 83       	std	Z+2, r24	; 0x02
    10e2:	21 15       	cp	r18, r1
    10e4:	31 05       	cpc	r19, r1
    10e6:	29 f4       	brne	.+10     	; 0x10f2 <free+0x92>
    10e8:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__flp+0x1>
    10ec:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__flp>
    10f0:	3d c0       	rjmp	.+122    	; 0x116c <free+0x10c>
    10f2:	e9 01       	movw	r28, r18
    10f4:	fb 83       	std	Y+3, r31	; 0x03
    10f6:	ea 83       	std	Y+2, r30	; 0x02
    10f8:	49 91       	ld	r20, Y+
    10fa:	59 91       	ld	r21, Y+
    10fc:	c4 0f       	add	r28, r20
    10fe:	d5 1f       	adc	r29, r21
    1100:	ec 17       	cp	r30, r28
    1102:	fd 07       	cpc	r31, r29
    1104:	61 f4       	brne	.+24     	; 0x111e <free+0xbe>
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	84 0f       	add	r24, r20
    110c:	95 1f       	adc	r25, r21
    110e:	02 96       	adiw	r24, 0x02	; 2
    1110:	e9 01       	movw	r28, r18
    1112:	99 83       	std	Y+1, r25	; 0x01
    1114:	88 83       	st	Y, r24
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	9b 83       	std	Y+3, r25	; 0x03
    111c:	8a 83       	std	Y+2, r24	; 0x02
    111e:	e0 e0       	ldi	r30, 0x00	; 0
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	12 96       	adiw	r26, 0x02	; 2
    1124:	8d 91       	ld	r24, X+
    1126:	9c 91       	ld	r25, X
    1128:	13 97       	sbiw	r26, 0x03	; 3
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	19 f0       	breq	.+6      	; 0x1134 <free+0xd4>
    112e:	fd 01       	movw	r30, r26
    1130:	dc 01       	movw	r26, r24
    1132:	f7 cf       	rjmp	.-18     	; 0x1122 <free+0xc2>
    1134:	8d 91       	ld	r24, X+
    1136:	9c 91       	ld	r25, X
    1138:	11 97       	sbiw	r26, 0x01	; 1
    113a:	9d 01       	movw	r18, r26
    113c:	2e 5f       	subi	r18, 0xFE	; 254
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	82 0f       	add	r24, r18
    1142:	93 1f       	adc	r25, r19
    1144:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__brkval>
    1148:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__brkval+0x1>
    114c:	28 17       	cp	r18, r24
    114e:	39 07       	cpc	r19, r25
    1150:	69 f4       	brne	.+26     	; 0x116c <free+0x10c>
    1152:	30 97       	sbiw	r30, 0x00	; 0
    1154:	29 f4       	brne	.+10     	; 0x1160 <free+0x100>
    1156:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__flp+0x1>
    115a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__flp>
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <free+0x104>
    1160:	13 82       	std	Z+3, r1	; 0x03
    1162:	12 82       	std	Z+2, r1	; 0x02
    1164:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__brkval+0x1>
    1168:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__brkval>
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <strcat>:
    1172:	fb 01       	movw	r30, r22
    1174:	dc 01       	movw	r26, r24
    1176:	0d 90       	ld	r0, X+
    1178:	00 20       	and	r0, r0
    117a:	e9 f7       	brne	.-6      	; 0x1176 <strcat+0x4>
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	01 90       	ld	r0, Z+
    1180:	0d 92       	st	X+, r0
    1182:	00 20       	and	r0, r0
    1184:	e1 f7       	brne	.-8      	; 0x117e <strcat+0xc>
    1186:	08 95       	ret

00001188 <dtoa_prf>:
    1188:	a9 e0       	ldi	r26, 0x09	; 9
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea ec       	ldi	r30, 0xCA	; 202
    118e:	f8 e0       	ldi	r31, 0x08	; 8
    1190:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__prologue_saves__+0xc>
    1194:	6a 01       	movw	r12, r20
    1196:	12 2f       	mov	r17, r18
    1198:	b0 2e       	mov	r11, r16
    119a:	2b e3       	ldi	r18, 0x3B	; 59
    119c:	20 17       	cp	r18, r16
    119e:	20 f0       	brcs	.+8      	; 0x11a8 <dtoa_prf+0x20>
    11a0:	ff 24       	eor	r15, r15
    11a2:	f3 94       	inc	r15
    11a4:	f0 0e       	add	r15, r16
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <dtoa_prf+0x24>
    11a8:	2c e3       	ldi	r18, 0x3C	; 60
    11aa:	f2 2e       	mov	r15, r18
    11ac:	0f 2d       	mov	r16, r15
    11ae:	27 e0       	ldi	r18, 0x07	; 7
    11b0:	ae 01       	movw	r20, r28
    11b2:	4f 5f       	subi	r20, 0xFF	; 255
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	0e 94 1e 0a 	call	0x143c	; 0x143c <__ftoa_engine>
    11ba:	bc 01       	movw	r22, r24
    11bc:	49 81       	ldd	r20, Y+1	; 0x01
    11be:	84 2f       	mov	r24, r20
    11c0:	89 70       	andi	r24, 0x09	; 9
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	31 f0       	breq	.+12     	; 0x11d2 <dtoa_prf+0x4a>
    11c6:	e1 fc       	sbrc	r14, 1
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <dtoa_prf+0x4e>
    11ca:	e0 fe       	sbrs	r14, 0
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <dtoa_prf+0x52>
    11ce:	90 e2       	ldi	r25, 0x20	; 32
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <dtoa_prf+0x54>
    11d2:	9d e2       	ldi	r25, 0x2D	; 45
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <dtoa_prf+0x54>
    11d6:	9b e2       	ldi	r25, 0x2B	; 43
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <dtoa_prf+0x54>
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	5e 2d       	mov	r21, r14
    11de:	50 71       	andi	r21, 0x10	; 16
    11e0:	43 ff       	sbrs	r20, 3
    11e2:	3c c0       	rjmp	.+120    	; 0x125c <dtoa_prf+0xd4>
    11e4:	91 11       	cpse	r25, r1
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <dtoa_prf+0x64>
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <dtoa_prf+0x66>
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	81 17       	cp	r24, r17
    11f0:	18 f4       	brcc	.+6      	; 0x11f8 <dtoa_prf+0x70>
    11f2:	21 2f       	mov	r18, r17
    11f4:	28 1b       	sub	r18, r24
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <dtoa_prf+0x72>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	51 11       	cpse	r21, r1
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <dtoa_prf+0x8c>
    11fe:	f6 01       	movw	r30, r12
    1200:	82 2f       	mov	r24, r18
    1202:	30 e2       	ldi	r19, 0x20	; 32
    1204:	88 23       	and	r24, r24
    1206:	19 f0       	breq	.+6      	; 0x120e <dtoa_prf+0x86>
    1208:	31 93       	st	Z+, r19
    120a:	81 50       	subi	r24, 0x01	; 1
    120c:	fb cf       	rjmp	.-10     	; 0x1204 <dtoa_prf+0x7c>
    120e:	c2 0e       	add	r12, r18
    1210:	d1 1c       	adc	r13, r1
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	99 23       	and	r25, r25
    1216:	29 f0       	breq	.+10     	; 0x1222 <dtoa_prf+0x9a>
    1218:	d6 01       	movw	r26, r12
    121a:	9c 93       	st	X, r25
    121c:	f6 01       	movw	r30, r12
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	6f 01       	movw	r12, r30
    1222:	c6 01       	movw	r24, r12
    1224:	03 96       	adiw	r24, 0x03	; 3
    1226:	e2 fe       	sbrs	r14, 2
    1228:	0a c0       	rjmp	.+20     	; 0x123e <dtoa_prf+0xb6>
    122a:	3e e4       	ldi	r19, 0x4E	; 78
    122c:	d6 01       	movw	r26, r12
    122e:	3c 93       	st	X, r19
    1230:	41 e4       	ldi	r20, 0x41	; 65
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	4c 93       	st	X, r20
    1236:	11 97       	sbiw	r26, 0x01	; 1
    1238:	12 96       	adiw	r26, 0x02	; 2
    123a:	3c 93       	st	X, r19
    123c:	06 c0       	rjmp	.+12     	; 0x124a <dtoa_prf+0xc2>
    123e:	3e e6       	ldi	r19, 0x6E	; 110
    1240:	f6 01       	movw	r30, r12
    1242:	30 83       	st	Z, r19
    1244:	41 e6       	ldi	r20, 0x61	; 97
    1246:	41 83       	std	Z+1, r20	; 0x01
    1248:	32 83       	std	Z+2, r19	; 0x02
    124a:	fc 01       	movw	r30, r24
    124c:	32 2f       	mov	r19, r18
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	33 23       	and	r19, r19
    1252:	09 f4       	brne	.+2      	; 0x1256 <dtoa_prf+0xce>
    1254:	42 c0       	rjmp	.+132    	; 0x12da <dtoa_prf+0x152>
    1256:	41 93       	st	Z+, r20
    1258:	31 50       	subi	r19, 0x01	; 1
    125a:	fa cf       	rjmp	.-12     	; 0x1250 <dtoa_prf+0xc8>
    125c:	42 ff       	sbrs	r20, 2
    125e:	44 c0       	rjmp	.+136    	; 0x12e8 <dtoa_prf+0x160>
    1260:	91 11       	cpse	r25, r1
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <dtoa_prf+0xe0>
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	01 c0       	rjmp	.+2      	; 0x126a <dtoa_prf+0xe2>
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	81 17       	cp	r24, r17
    126c:	18 f4       	brcc	.+6      	; 0x1274 <dtoa_prf+0xec>
    126e:	21 2f       	mov	r18, r17
    1270:	28 1b       	sub	r18, r24
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <dtoa_prf+0xee>
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	51 11       	cpse	r21, r1
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <dtoa_prf+0x108>
    127a:	f6 01       	movw	r30, r12
    127c:	82 2f       	mov	r24, r18
    127e:	30 e2       	ldi	r19, 0x20	; 32
    1280:	88 23       	and	r24, r24
    1282:	19 f0       	breq	.+6      	; 0x128a <dtoa_prf+0x102>
    1284:	31 93       	st	Z+, r19
    1286:	81 50       	subi	r24, 0x01	; 1
    1288:	fb cf       	rjmp	.-10     	; 0x1280 <dtoa_prf+0xf8>
    128a:	c2 0e       	add	r12, r18
    128c:	d1 1c       	adc	r13, r1
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	99 23       	and	r25, r25
    1292:	29 f0       	breq	.+10     	; 0x129e <dtoa_prf+0x116>
    1294:	d6 01       	movw	r26, r12
    1296:	9c 93       	st	X, r25
    1298:	f6 01       	movw	r30, r12
    129a:	31 96       	adiw	r30, 0x01	; 1
    129c:	6f 01       	movw	r12, r30
    129e:	c6 01       	movw	r24, r12
    12a0:	03 96       	adiw	r24, 0x03	; 3
    12a2:	e2 fe       	sbrs	r14, 2
    12a4:	0b c0       	rjmp	.+22     	; 0x12bc <dtoa_prf+0x134>
    12a6:	39 e4       	ldi	r19, 0x49	; 73
    12a8:	d6 01       	movw	r26, r12
    12aa:	3c 93       	st	X, r19
    12ac:	3e e4       	ldi	r19, 0x4E	; 78
    12ae:	11 96       	adiw	r26, 0x01	; 1
    12b0:	3c 93       	st	X, r19
    12b2:	11 97       	sbiw	r26, 0x01	; 1
    12b4:	36 e4       	ldi	r19, 0x46	; 70
    12b6:	12 96       	adiw	r26, 0x02	; 2
    12b8:	3c 93       	st	X, r19
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <dtoa_prf+0x142>
    12bc:	39 e6       	ldi	r19, 0x69	; 105
    12be:	f6 01       	movw	r30, r12
    12c0:	30 83       	st	Z, r19
    12c2:	3e e6       	ldi	r19, 0x6E	; 110
    12c4:	31 83       	std	Z+1, r19	; 0x01
    12c6:	36 e6       	ldi	r19, 0x66	; 102
    12c8:	32 83       	std	Z+2, r19	; 0x02
    12ca:	fc 01       	movw	r30, r24
    12cc:	32 2f       	mov	r19, r18
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	33 23       	and	r19, r19
    12d2:	19 f0       	breq	.+6      	; 0x12da <dtoa_prf+0x152>
    12d4:	41 93       	st	Z+, r20
    12d6:	31 50       	subi	r19, 0x01	; 1
    12d8:	fb cf       	rjmp	.-10     	; 0x12d0 <dtoa_prf+0x148>
    12da:	fc 01       	movw	r30, r24
    12dc:	e2 0f       	add	r30, r18
    12de:	f1 1d       	adc	r31, r1
    12e0:	10 82       	st	Z, r1
    12e2:	8e ef       	ldi	r24, 0xFE	; 254
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	a6 c0       	rjmp	.+332    	; 0x1434 <dtoa_prf+0x2ac>
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	91 11       	cpse	r25, r1
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <dtoa_prf+0x16c>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	16 16       	cp	r1, r22
    12f6:	17 06       	cpc	r1, r23
    12f8:	1c f4       	brge	.+6      	; 0x1300 <dtoa_prf+0x178>
    12fa:	fb 01       	movw	r30, r22
    12fc:	31 96       	adiw	r30, 0x01	; 1
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <dtoa_prf+0x17c>
    1300:	e1 e0       	ldi	r30, 0x01	; 1
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	2e 0f       	add	r18, r30
    1306:	3f 1f       	adc	r19, r31
    1308:	bb 20       	and	r11, r11
    130a:	21 f0       	breq	.+8      	; 0x1314 <dtoa_prf+0x18c>
    130c:	eb 2d       	mov	r30, r11
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	31 96       	adiw	r30, 0x01	; 1
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <dtoa_prf+0x190>
    1314:	e0 e0       	ldi	r30, 0x00	; 0
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	2e 0f       	add	r18, r30
    131a:	3f 1f       	adc	r19, r31
    131c:	e1 2f       	mov	r30, r17
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	2e 17       	cp	r18, r30
    1322:	3f 07       	cpc	r19, r31
    1324:	1c f4       	brge	.+6      	; 0x132c <dtoa_prf+0x1a4>
    1326:	12 1b       	sub	r17, r18
    1328:	21 2f       	mov	r18, r17
    132a:	01 c0       	rjmp	.+2      	; 0x132e <dtoa_prf+0x1a6>
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	8e 2d       	mov	r24, r14
    1330:	88 71       	andi	r24, 0x18	; 24
    1332:	59 f4       	brne	.+22     	; 0x134a <dtoa_prf+0x1c2>
    1334:	f6 01       	movw	r30, r12
    1336:	82 2f       	mov	r24, r18
    1338:	30 e2       	ldi	r19, 0x20	; 32
    133a:	88 23       	and	r24, r24
    133c:	19 f0       	breq	.+6      	; 0x1344 <dtoa_prf+0x1bc>
    133e:	31 93       	st	Z+, r19
    1340:	81 50       	subi	r24, 0x01	; 1
    1342:	fb cf       	rjmp	.-10     	; 0x133a <dtoa_prf+0x1b2>
    1344:	c2 0e       	add	r12, r18
    1346:	d1 1c       	adc	r13, r1
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	99 23       	and	r25, r25
    134c:	29 f0       	breq	.+10     	; 0x1358 <dtoa_prf+0x1d0>
    134e:	d6 01       	movw	r26, r12
    1350:	9c 93       	st	X, r25
    1352:	f6 01       	movw	r30, r12
    1354:	31 96       	adiw	r30, 0x01	; 1
    1356:	6f 01       	movw	r12, r30
    1358:	51 11       	cpse	r21, r1
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <dtoa_prf+0x1ea>
    135c:	f6 01       	movw	r30, r12
    135e:	82 2f       	mov	r24, r18
    1360:	90 e3       	ldi	r25, 0x30	; 48
    1362:	88 23       	and	r24, r24
    1364:	19 f0       	breq	.+6      	; 0x136c <dtoa_prf+0x1e4>
    1366:	91 93       	st	Z+, r25
    1368:	81 50       	subi	r24, 0x01	; 1
    136a:	fb cf       	rjmp	.-10     	; 0x1362 <dtoa_prf+0x1da>
    136c:	c2 0e       	add	r12, r18
    136e:	d1 1c       	adc	r13, r1
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	0f 2d       	mov	r16, r15
    1374:	06 0f       	add	r16, r22
    1376:	9a 81       	ldd	r25, Y+2	; 0x02
    1378:	34 2f       	mov	r19, r20
    137a:	30 71       	andi	r19, 0x10	; 16
    137c:	44 ff       	sbrs	r20, 4
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <dtoa_prf+0x1fe>
    1380:	91 33       	cpi	r25, 0x31	; 49
    1382:	09 f4       	brne	.+2      	; 0x1386 <dtoa_prf+0x1fe>
    1384:	01 50       	subi	r16, 0x01	; 1
    1386:	10 16       	cp	r1, r16
    1388:	24 f4       	brge	.+8      	; 0x1392 <dtoa_prf+0x20a>
    138a:	09 30       	cpi	r16, 0x09	; 9
    138c:	18 f0       	brcs	.+6      	; 0x1394 <dtoa_prf+0x20c>
    138e:	08 e0       	ldi	r16, 0x08	; 8
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <dtoa_prf+0x20c>
    1392:	01 e0       	ldi	r16, 0x01	; 1
    1394:	ab 01       	movw	r20, r22
    1396:	77 ff       	sbrs	r23, 7
    1398:	02 c0       	rjmp	.+4      	; 0x139e <dtoa_prf+0x216>
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	fb 01       	movw	r30, r22
    13a0:	e4 1b       	sub	r30, r20
    13a2:	f5 0b       	sbc	r31, r21
    13a4:	a1 e0       	ldi	r26, 0x01	; 1
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ac 0f       	add	r26, r28
    13aa:	bd 1f       	adc	r27, r29
    13ac:	ea 0f       	add	r30, r26
    13ae:	fb 1f       	adc	r31, r27
    13b0:	8e e2       	ldi	r24, 0x2E	; 46
    13b2:	a8 2e       	mov	r10, r24
    13b4:	4b 01       	movw	r8, r22
    13b6:	80 1a       	sub	r8, r16
    13b8:	91 08       	sbc	r9, r1
    13ba:	0b 2d       	mov	r16, r11
    13bc:	10 e0       	ldi	r17, 0x00	; 0
    13be:	11 95       	neg	r17
    13c0:	01 95       	neg	r16
    13c2:	11 09       	sbc	r17, r1
    13c4:	4f 3f       	cpi	r20, 0xFF	; 255
    13c6:	bf ef       	ldi	r27, 0xFF	; 255
    13c8:	5b 07       	cpc	r21, r27
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <dtoa_prf+0x24c>
    13cc:	d6 01       	movw	r26, r12
    13ce:	ac 92       	st	X, r10
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	6d 01       	movw	r12, r26
    13d4:	64 17       	cp	r22, r20
    13d6:	75 07       	cpc	r23, r21
    13d8:	2c f0       	brlt	.+10     	; 0x13e4 <dtoa_prf+0x25c>
    13da:	84 16       	cp	r8, r20
    13dc:	95 06       	cpc	r9, r21
    13de:	14 f4       	brge	.+4      	; 0x13e4 <dtoa_prf+0x25c>
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <dtoa_prf+0x25e>
    13e4:	80 e3       	ldi	r24, 0x30	; 48
    13e6:	41 50       	subi	r20, 0x01	; 1
    13e8:	51 09       	sbc	r21, r1
    13ea:	31 96       	adiw	r30, 0x01	; 1
    13ec:	d6 01       	movw	r26, r12
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	7d 01       	movw	r14, r26
    13f2:	40 17       	cp	r20, r16
    13f4:	51 07       	cpc	r21, r17
    13f6:	24 f0       	brlt	.+8      	; 0x1400 <dtoa_prf+0x278>
    13f8:	d6 01       	movw	r26, r12
    13fa:	8c 93       	st	X, r24
    13fc:	67 01       	movw	r12, r14
    13fe:	e2 cf       	rjmp	.-60     	; 0x13c4 <dtoa_prf+0x23c>
    1400:	64 17       	cp	r22, r20
    1402:	75 07       	cpc	r23, r21
    1404:	39 f4       	brne	.+14     	; 0x1414 <dtoa_prf+0x28c>
    1406:	96 33       	cpi	r25, 0x36	; 54
    1408:	20 f4       	brcc	.+8      	; 0x1412 <dtoa_prf+0x28a>
    140a:	95 33       	cpi	r25, 0x35	; 53
    140c:	19 f4       	brne	.+6      	; 0x1414 <dtoa_prf+0x28c>
    140e:	31 11       	cpse	r19, r1
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <dtoa_prf+0x28c>
    1412:	81 e3       	ldi	r24, 0x31	; 49
    1414:	f6 01       	movw	r30, r12
    1416:	80 83       	st	Z, r24
    1418:	f7 01       	movw	r30, r14
    141a:	82 2f       	mov	r24, r18
    141c:	90 e2       	ldi	r25, 0x20	; 32
    141e:	88 23       	and	r24, r24
    1420:	19 f0       	breq	.+6      	; 0x1428 <dtoa_prf+0x2a0>
    1422:	91 93       	st	Z+, r25
    1424:	81 50       	subi	r24, 0x01	; 1
    1426:	fb cf       	rjmp	.-10     	; 0x141e <dtoa_prf+0x296>
    1428:	f7 01       	movw	r30, r14
    142a:	e2 0f       	add	r30, r18
    142c:	f1 1d       	adc	r31, r1
    142e:	10 82       	st	Z, r1
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	29 96       	adiw	r28, 0x09	; 9
    1436:	ec e0       	ldi	r30, 0x0C	; 12
    1438:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__epilogue_restores__+0xc>

0000143c <__ftoa_engine>:
    143c:	28 30       	cpi	r18, 0x08	; 8
    143e:	08 f0       	brcs	.+2      	; 0x1442 <__ftoa_engine+0x6>
    1440:	27 e0       	ldi	r18, 0x07	; 7
    1442:	33 27       	eor	r19, r19
    1444:	da 01       	movw	r26, r20
    1446:	99 0f       	add	r25, r25
    1448:	31 1d       	adc	r19, r1
    144a:	87 fd       	sbrc	r24, 7
    144c:	91 60       	ori	r25, 0x01	; 1
    144e:	00 96       	adiw	r24, 0x00	; 0
    1450:	61 05       	cpc	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	39 f4       	brne	.+14     	; 0x1464 <__ftoa_engine+0x28>
    1456:	32 60       	ori	r19, 0x02	; 2
    1458:	2e 5f       	subi	r18, 0xFE	; 254
    145a:	3d 93       	st	X+, r19
    145c:	30 e3       	ldi	r19, 0x30	; 48
    145e:	2a 95       	dec	r18
    1460:	e1 f7       	brne	.-8      	; 0x145a <__ftoa_engine+0x1e>
    1462:	08 95       	ret
    1464:	9f 3f       	cpi	r25, 0xFF	; 255
    1466:	30 f0       	brcs	.+12     	; 0x1474 <__ftoa_engine+0x38>
    1468:	80 38       	cpi	r24, 0x80	; 128
    146a:	71 05       	cpc	r23, r1
    146c:	61 05       	cpc	r22, r1
    146e:	09 f0       	breq	.+2      	; 0x1472 <__ftoa_engine+0x36>
    1470:	3c 5f       	subi	r19, 0xFC	; 252
    1472:	3c 5f       	subi	r19, 0xFC	; 252
    1474:	3d 93       	st	X+, r19
    1476:	91 30       	cpi	r25, 0x01	; 1
    1478:	08 f0       	brcs	.+2      	; 0x147c <__ftoa_engine+0x40>
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	91 1d       	adc	r25, r1
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	1f 93       	push	r17
    1484:	0f 93       	push	r16
    1486:	ff 92       	push	r15
    1488:	ef 92       	push	r14
    148a:	19 2f       	mov	r17, r25
    148c:	98 7f       	andi	r25, 0xF8	; 248
    148e:	96 95       	lsr	r25
    1490:	e9 2f       	mov	r30, r25
    1492:	96 95       	lsr	r25
    1494:	96 95       	lsr	r25
    1496:	e9 0f       	add	r30, r25
    1498:	ff 27       	eor	r31, r31
    149a:	ee 53       	subi	r30, 0x3E	; 62
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	99 27       	eor	r25, r25
    14a0:	33 27       	eor	r19, r19
    14a2:	ee 24       	eor	r14, r14
    14a4:	ff 24       	eor	r15, r15
    14a6:	a7 01       	movw	r20, r14
    14a8:	e7 01       	movw	r28, r14
    14aa:	05 90       	lpm	r0, Z+
    14ac:	08 94       	sec
    14ae:	07 94       	ror	r0
    14b0:	28 f4       	brcc	.+10     	; 0x14bc <__ftoa_engine+0x80>
    14b2:	36 0f       	add	r19, r22
    14b4:	e7 1e       	adc	r14, r23
    14b6:	f8 1e       	adc	r15, r24
    14b8:	49 1f       	adc	r20, r25
    14ba:	51 1d       	adc	r21, r1
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	06 94       	lsr	r0
    14c6:	a1 f7       	brne	.-24     	; 0x14b0 <__ftoa_engine+0x74>
    14c8:	05 90       	lpm	r0, Z+
    14ca:	07 94       	ror	r0
    14cc:	28 f4       	brcc	.+10     	; 0x14d8 <__ftoa_engine+0x9c>
    14ce:	e7 0e       	add	r14, r23
    14d0:	f8 1e       	adc	r15, r24
    14d2:	49 1f       	adc	r20, r25
    14d4:	56 1f       	adc	r21, r22
    14d6:	c1 1d       	adc	r28, r1
    14d8:	77 0f       	add	r23, r23
    14da:	88 1f       	adc	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	66 1f       	adc	r22, r22
    14e0:	06 94       	lsr	r0
    14e2:	a1 f7       	brne	.-24     	; 0x14cc <__ftoa_engine+0x90>
    14e4:	05 90       	lpm	r0, Z+
    14e6:	07 94       	ror	r0
    14e8:	28 f4       	brcc	.+10     	; 0x14f4 <__ftoa_engine+0xb8>
    14ea:	f8 0e       	add	r15, r24
    14ec:	49 1f       	adc	r20, r25
    14ee:	56 1f       	adc	r21, r22
    14f0:	c7 1f       	adc	r28, r23
    14f2:	d1 1d       	adc	r29, r1
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	66 1f       	adc	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	06 94       	lsr	r0
    14fe:	a1 f7       	brne	.-24     	; 0x14e8 <__ftoa_engine+0xac>
    1500:	05 90       	lpm	r0, Z+
    1502:	07 94       	ror	r0
    1504:	20 f4       	brcc	.+8      	; 0x150e <__ftoa_engine+0xd2>
    1506:	49 0f       	add	r20, r25
    1508:	56 1f       	adc	r21, r22
    150a:	c7 1f       	adc	r28, r23
    150c:	d8 1f       	adc	r29, r24
    150e:	99 0f       	add	r25, r25
    1510:	66 1f       	adc	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	06 94       	lsr	r0
    1518:	a9 f7       	brne	.-22     	; 0x1504 <__ftoa_engine+0xc8>
    151a:	84 91       	lpm	r24, Z
    151c:	10 95       	com	r17
    151e:	17 70       	andi	r17, 0x07	; 7
    1520:	41 f0       	breq	.+16     	; 0x1532 <__ftoa_engine+0xf6>
    1522:	d6 95       	lsr	r29
    1524:	c7 95       	ror	r28
    1526:	57 95       	ror	r21
    1528:	47 95       	ror	r20
    152a:	f7 94       	ror	r15
    152c:	e7 94       	ror	r14
    152e:	1a 95       	dec	r17
    1530:	c1 f7       	brne	.-16     	; 0x1522 <__ftoa_engine+0xe6>
    1532:	e8 e6       	ldi	r30, 0x68	; 104
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	68 94       	set
    1538:	15 90       	lpm	r1, Z+
    153a:	15 91       	lpm	r17, Z+
    153c:	35 91       	lpm	r19, Z+
    153e:	65 91       	lpm	r22, Z+
    1540:	95 91       	lpm	r25, Z+
    1542:	05 90       	lpm	r0, Z+
    1544:	7f e2       	ldi	r23, 0x2F	; 47
    1546:	73 95       	inc	r23
    1548:	e1 18       	sub	r14, r1
    154a:	f1 0a       	sbc	r15, r17
    154c:	43 0b       	sbc	r20, r19
    154e:	56 0b       	sbc	r21, r22
    1550:	c9 0b       	sbc	r28, r25
    1552:	d0 09       	sbc	r29, r0
    1554:	c0 f7       	brcc	.-16     	; 0x1546 <__ftoa_engine+0x10a>
    1556:	e1 0c       	add	r14, r1
    1558:	f1 1e       	adc	r15, r17
    155a:	43 1f       	adc	r20, r19
    155c:	56 1f       	adc	r21, r22
    155e:	c9 1f       	adc	r28, r25
    1560:	d0 1d       	adc	r29, r0
    1562:	7e f4       	brtc	.+30     	; 0x1582 <__ftoa_engine+0x146>
    1564:	70 33       	cpi	r23, 0x30	; 48
    1566:	11 f4       	brne	.+4      	; 0x156c <__ftoa_engine+0x130>
    1568:	8a 95       	dec	r24
    156a:	e6 cf       	rjmp	.-52     	; 0x1538 <__ftoa_engine+0xfc>
    156c:	e8 94       	clt
    156e:	01 50       	subi	r16, 0x01	; 1
    1570:	30 f0       	brcs	.+12     	; 0x157e <__ftoa_engine+0x142>
    1572:	08 0f       	add	r16, r24
    1574:	0a f4       	brpl	.+2      	; 0x1578 <__ftoa_engine+0x13c>
    1576:	00 27       	eor	r16, r16
    1578:	02 17       	cp	r16, r18
    157a:	08 f4       	brcc	.+2      	; 0x157e <__ftoa_engine+0x142>
    157c:	20 2f       	mov	r18, r16
    157e:	23 95       	inc	r18
    1580:	02 2f       	mov	r16, r18
    1582:	7a 33       	cpi	r23, 0x3A	; 58
    1584:	28 f0       	brcs	.+10     	; 0x1590 <__ftoa_engine+0x154>
    1586:	79 e3       	ldi	r23, 0x39	; 57
    1588:	7d 93       	st	X+, r23
    158a:	2a 95       	dec	r18
    158c:	e9 f7       	brne	.-6      	; 0x1588 <__ftoa_engine+0x14c>
    158e:	10 c0       	rjmp	.+32     	; 0x15b0 <__ftoa_engine+0x174>
    1590:	7d 93       	st	X+, r23
    1592:	2a 95       	dec	r18
    1594:	89 f6       	brne	.-94     	; 0x1538 <__ftoa_engine+0xfc>
    1596:	06 94       	lsr	r0
    1598:	97 95       	ror	r25
    159a:	67 95       	ror	r22
    159c:	37 95       	ror	r19
    159e:	17 95       	ror	r17
    15a0:	17 94       	ror	r1
    15a2:	e1 18       	sub	r14, r1
    15a4:	f1 0a       	sbc	r15, r17
    15a6:	43 0b       	sbc	r20, r19
    15a8:	56 0b       	sbc	r21, r22
    15aa:	c9 0b       	sbc	r28, r25
    15ac:	d0 09       	sbc	r29, r0
    15ae:	98 f0       	brcs	.+38     	; 0x15d6 <__ftoa_engine+0x19a>
    15b0:	23 95       	inc	r18
    15b2:	7e 91       	ld	r23, -X
    15b4:	73 95       	inc	r23
    15b6:	7a 33       	cpi	r23, 0x3A	; 58
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <__ftoa_engine+0x180>
    15ba:	70 e3       	ldi	r23, 0x30	; 48
    15bc:	7c 93       	st	X, r23
    15be:	20 13       	cpse	r18, r16
    15c0:	b8 f7       	brcc	.-18     	; 0x15b0 <__ftoa_engine+0x174>
    15c2:	7e 91       	ld	r23, -X
    15c4:	70 61       	ori	r23, 0x10	; 16
    15c6:	7d 93       	st	X+, r23
    15c8:	30 f0       	brcs	.+12     	; 0x15d6 <__ftoa_engine+0x19a>
    15ca:	83 95       	inc	r24
    15cc:	71 e3       	ldi	r23, 0x31	; 49
    15ce:	7d 93       	st	X+, r23
    15d0:	70 e3       	ldi	r23, 0x30	; 48
    15d2:	2a 95       	dec	r18
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <__ftoa_engine+0x192>
    15d6:	11 24       	eor	r1, r1
    15d8:	ef 90       	pop	r14
    15da:	ff 90       	pop	r15
    15dc:	0f 91       	pop	r16
    15de:	1f 91       	pop	r17
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	99 27       	eor	r25, r25
    15e6:	87 fd       	sbrc	r24, 7
    15e8:	90 95       	com	r25
    15ea:	08 95       	ret

000015ec <__prologue_saves__>:
    15ec:	2f 92       	push	r2
    15ee:	3f 92       	push	r3
    15f0:	4f 92       	push	r4
    15f2:	5f 92       	push	r5
    15f4:	6f 92       	push	r6
    15f6:	7f 92       	push	r7
    15f8:	8f 92       	push	r8
    15fa:	9f 92       	push	r9
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	ca 1b       	sub	r28, r26
    1616:	db 0b       	sbc	r29, r27
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	09 94       	ijmp

00001624 <__epilogue_restores__>:
    1624:	2a 88       	ldd	r2, Y+18	; 0x12
    1626:	39 88       	ldd	r3, Y+17	; 0x11
    1628:	48 88       	ldd	r4, Y+16	; 0x10
    162a:	5f 84       	ldd	r5, Y+15	; 0x0f
    162c:	6e 84       	ldd	r6, Y+14	; 0x0e
    162e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1630:	8c 84       	ldd	r8, Y+12	; 0x0c
    1632:	9b 84       	ldd	r9, Y+11	; 0x0b
    1634:	aa 84       	ldd	r10, Y+10	; 0x0a
    1636:	b9 84       	ldd	r11, Y+9	; 0x09
    1638:	c8 84       	ldd	r12, Y+8	; 0x08
    163a:	df 80       	ldd	r13, Y+7	; 0x07
    163c:	ee 80       	ldd	r14, Y+6	; 0x06
    163e:	fd 80       	ldd	r15, Y+5	; 0x05
    1640:	0c 81       	ldd	r16, Y+4	; 0x04
    1642:	1b 81       	ldd	r17, Y+3	; 0x03
    1644:	aa 81       	ldd	r26, Y+2	; 0x02
    1646:	b9 81       	ldd	r27, Y+1	; 0x01
    1648:	ce 0f       	add	r28, r30
    164a:	d1 1d       	adc	r29, r1
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	ed 01       	movw	r28, r26
    1658:	08 95       	ret

0000165a <_exit>:
    165a:	f8 94       	cli

0000165c <__stop_program>:
    165c:	ff cf       	rjmp	.-2      	; 0x165c <__stop_program>
